/*****************************************************************************
 **
 ** @ngdoc overview
 ** @name app.js
 **
 ** @description
 ** main AngularJS application definition file - loads all plugins that will 
 ** be a part of the module.
 **
 ****************************************************************************/
// Global debug flag (passed to other modules)
//////////////////////////////////////////////////////////////////////////////
// Miscellaneous Calendar functions
//////////////////////////////////////////////////////////////////////////////
function getCalendarHTML(mo,yr,showToday){
// mo = zero-based month number
// yr = 4 digit year YYYY
// Create an array containing the month names
var M=new Array("January","February","March","April","May","June","July","August","September","October","November","December"),D=new Array("Sun","Mon","Tue","Wed","Thu","Fri","Sat"),dayOne=new Date(M[mo]+" 1,"+yr),dy=dayOne.getDay();yr=eval(yr);
// Days in each month
var d="312831303130313130313031";
// Is this leap year?
yr/4===Math.floor(yr/4)&&(d=d.substring(0,2)+"29"+d.substring(4,d.length));
// Calculate the position in the d string for this month
var pos=2*mo,ld=eval(d.substring(pos,pos+2)),tday=(new Date).getDate(),dow=(new Date).getDay(),htmlText='<table class="calTable"><tr>';
// Display the month and year
htmlText+='<th class="monHdr"',showToday&&(htmlText+=" hiLite"),htmlText+='" colspan=7 center>'+M[mo]+" "+yr+"</th></tr>",
// Display the days of the week
htmlText+="<tr>";for(var i=0;i<7;i++)htmlText+=i==dow&&showToday?'<td class="wkdayHdr hiLite">':'<td class="wkdayHdr">',htmlText+=D[i]+"</td>";htmlText+="</tr>";var ctr=0;
// Display the day of the month or a blank space
// for the first week of the month
for(
// Display the day of the month or a blank if the 1st falls in mid-week
htmlText+='<tr class="calDayRow">',i=0;i<7;i++)i<dy?htmlText+="<td> </td>":(ctr++,htmlText+=ctr==tday&&showToday?'<td class="hiLite">':"<td>",htmlText+=ctr+"</td>");for(htmlText+="</tr>",
// Display the day of the month for the rest of the month
// Display a blank after the last day of the month
htmlText+='<tr class="calDayRow">';ctr<=ld;){for(i=0;i<7;i++)ctr++,ctr>ld?htmlText+="<td> </td>":(htmlText+=ctr==tday&&showToday?'<td class="hiLite">':"<td>",htmlText+=ctr+"</td>");htmlText+='</tr><tr class="calDayRow">'}return htmlText+='</tr></table><br class="clear" /></div>'}function showCalenders(){var e=new Date,t=e.getMonth(),l=e.getYear()+1900,n=0===t?11:t-1,o=0===t?l-1:l,i=11===t?l+1:l,r=11===t?0:t+1,a=document.getElementById("calLastMon"),c=document.getElementById("calThisMon"),s=document.getElementById("calNextMon");a&&(a.innerHTML=getCalendarHTML(n,o,!1)),c&&(c.innerHTML=getCalendarHTML(t,l,!0)),s&&(s.innerHTML=getCalendarHTML(r,i,!1))}
//////////////////////////////////////////////////////////////////////////////
// Gather Screen Size Information
//////////////////////////////////////////////////////////////////////////////
function gebID(e){return document.getElementById(e)}function gebTN(e){return document.getElementsByTagName(e)}function setStyleToTags(e,t){for(var l=gebTN(e),n=0;n<l.length;n++)l[n].setAttribute("style",t)}function testSizes(e){null===e&&(e="body"),gebID("screen.Width").innerHTML=screen.width.toString(),gebID("screen.Height").innerHTML=screen.height.toString(),gebID("window.Width").innerHTML=window.innerWidth.toString(),gebID("window.Height").innerHTML=window.innerHeight.toString(),gebID("documentElement.Width").innerHTML=document.documentElement.clientWidth.toString(),gebID("documentElement.Height").innerHTML=document.documentElement.clientHeight.toString(),gebID("body.Width").innerHTML=gebTN(e)[0].clientWidth.toString(),gebID("body.Height").innerHTML=gebTN(e)[0].clientHeight.toString()}function displaySizes(e){null===e&&(e="body");var t=document.createElement("table");t.innerHTML="<tr><th>SOURCE</th><th>WIDTH</th><th>x</th><th>HEIGHT</th></tr><tr><td>screen</td><td id='screen.Width' /><td>x</td><td id='screen.Height' /></tr><tr><td>window</td><td id='window.Width' /><td>x</td><td id='window.Height' /></tr><tr><td>document<br>.documentElement</td><td id='documentElement.Width' /><td>x</td><td id='documentElement.Height' /></tr><tr><td>document.body</td><td id='body.Width' /><td>x</td><td id='body.Height' /></tr>",gebTN(e)[0].appendChild(t),setStyleToTags("table","border: 2px solid black !important; position: fixed !important;left: 100px !important; top: 90px !important; padding:5px !important;width: 200px !important; font-size:10px; !importantwhite-space: pre !important; font-family: monospace !important;z-index: 9999 !important;background: white !important;"),setStyleToTags("td","color: black !important; border: none !important; padding: 5px !important; text-align:center !important;"),setStyleToTags("th","color: black !important; border: none !important; padding: 5px !important; text-align:center !important;"),t.style.setProperty("margin-left","-"+t.clientWidth/2+"px"),setInterval(testSizes,200)}function sortByKey(e,t){return e.sort(function(e,l){var n=e[t],o=l[t];return n<o?-1:n>o?1:0})}function multObjArray2Array(e){for(var t=[],l=0;l<e.length;l++)for(var n=0;n<e[l].length;n++)t.push(e[l][n]);return t}function JSONDateToDateObj(e){// jd = JSON Date format ie. '2013-03-08T14:34:00:000Z'
if(24!=e.length||"-"!=e.substr(4,1)||"-"!=e.substr(7,1)||"T"!=e.substr(10,1)||":"!=e.substr(13,1)||":"!=e.substr(16,1)||":"!=e.substr(19,1)||"Z"!=e.substr(23,1))return null;var t=new Date;return t.setFullYear(e.substr(0,4),e.substr(5,2)-1,e.substr(8,2)),t.setHours(e.substr(11,2)),t.setMinutes(e.substr(14,2)),t.setSeconds(e.substr(17,2)),t.setMilliseconds(e.substr(20,3)),t}function editImageData(e){alert("I'm sorry, you don't have the authority to edit image ID#"+e+".")}function deleteImage(e){alert("I'm sorry, you don't have the authority to delete image ID#"+e+".")}function enlargeToggle(e){alert("Enlarge image ID#"+e+".")}function resizePage(){$(document).ready(function(){console.log("resizePage: resize screen on load!");var e=window.height-100;$("#photoCarousel").css("height",e)})}function timedLoop(e,t){setTimeout(function(){console.log("timedLoop("+e+", "+t+")"),//  your code here                
--e&&timedLoop(e,t)},1e3*t)}var debug=!0;!function(){"use strict";
// Define main module.
angular.module("app",["ngAnimate","ngResource","ngTouch","ui","ui.bootstrap","ui.bootstrap.carousel","ui.bootstrap.progressbar","ui.grid","ui.grid.edit","ui.grid.cellNav","ui.grid.resizeColumns","ui.grid.pinning","ui.grid.selection","ui.grid.moveColumns","ui.grid.exporter","ui.grid.importer","ui.grid.grouping","ui.router","ui.sortable"]);debug&&console.log("angular.module(app) defined")}(),/*****************************************************************************
 ** END OF FILE - app.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : app.config.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";
// Navigation is supplied via the following ui-router section
// 
angular.module("app").config(["$urlRouterProvider","$stateProvider",function(e,t){t.state("home",{controller:"homeController",templateUrl:"partials/home/home.html",url:"/home"}).state("facility",{controller:"facilityController",templateUrl:"partials/facility/facility.html",url:"/facility"}).state("client",{controller:"clientController",templateUrl:"partials/client/client.html",url:"/client"}).state("volunteer",{controller:"volunteerController",templateUrl:"partials/volunteer/volunteer.html",url:"/volunteer"}).state("sample",{controller:"sampleController",templateUrl:"partials/sample/sample.html",url:"/sample"}).state("sample2",{controller:"sampleController",templateUrl:"partials/sample/sample2.html",url:"/sample2"}).state("login",{controller:"userController",templateUrl:"partials/account/login.html",url:"/login"}).state("logout",{templateUrl:"partials/account/logout.html",url:"/logout"}),e.when("/facility/:facilityName","/partials/facility/:id").when("/volunteer/:volunteerName","/partials/volunteer/:id").when("/client/:clientName","/partials/client/:id").otherwise("/home")}]),debug&&console.log('       .config(["$urlRouterProvider", "$stateProvider"]) defined')}(),/*****************************************************************************
 ** END OF FILE - app.config.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : app.run.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";angular.module("app").run(["$rootScope","$state","$stateParams",function(e,t,l){/* It's very handy to add references to $state and $stateParams to the $rootScope
                ** so that you can access them from any scope within your applications.
                ** For example, <li ng-class='{ active: $state.includes('contacts.list') }'> will
                ** set the <li> to active whenever 'contacts.list' or one of its decendents is active.
                */
e.state=t,e.stateParams=l,e.pageLoaded=!0,debug?(e.debug=debug,e.endPoint="http://localhost:3000"):e.endPoint="http://resex.org"}]),debug&&console.log('       .run(["$rootScope","$state","$stateParams",function ($rootScope,$state,$stateParams) executed')}(),//  pass the number of iterations as an argument
debug&&console.log("misc.js functions defined"),
//}());
/*****************************************************************************
 ** END OF FILE - misc.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : about.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";var e=function(e){debug&&console.log("aboutController activated"),e.items=["about","website"]};angular.module("app").controller("aboutController",["$scope",e]),debug&&console.log("aboutController defined")}(),/*****************************************************************************
 ** END OF FILE - about.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : home.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";angular.module("app").controller("homeController",["$rootScope",function(e){var t=e;
// Temporary values 
// TODO: replace these with real login values;
return debug&&console.log("homeController activated"),t.loggedIn=!0,t.userName="bill@maintz.com",showCalenders(),t}]),debug&&console.log("homeController defined")}(),/*****************************************************************************
 ** END OF FILE - home.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : client.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";
// clientController Function
var e=function(e,t){debug&&console.log("clientController activated");var l=e;
// console.log(' clients = ', vm.clients);
// console.log('#clients = ', vm.clients.length);
// console.log(' clientCats = ', vm.clientCats);
// console.log('\nui-grid.Options = ', vm.gridOptions);
//////////////////////////////////////////////////////////////////////
// clients collection
//////////////////////////////////////////////////////////////////////
// GET All clients
//////////////////////////////////////////////////////////////////////
// ui-grid options
//////////////////////////////////////////////////////////////////////
return l.init=function(){l.clients=[],l.clientCats=[],l.sortOrder="id",l.clients=l.getAllV()},l.getAllV=function(){t.srvcGetAllclients().then(function(e){
// success
l.clients=e,console.log("Number of clients returned = ["+l.clients.length+"]")},function(e){
// error
console.log("ERROR:"+e)},function(e){}).then(function(e){l.clientCats=_.uniq(_.pluck(l.clients,"category"))}),debug&&0!=l.clients.length&&console.log("clientController clients("+l.clients.length+")")},l.init(),l.addclient=function(){var e=$modal.open({templateUrl:"/partials/client/addclient.html",controller:"clientController"});e.result.then(function(){
// success
l.getAllV()},function(e){
// error
l.getAllV()},function(e){}),l.modifyData=!1},l.editclient=function(e){l.modifyData=!0,confirm("Do you want to save the changes?")&&t.srvcEditclient(e).then(function(e){
// success
l.getAllV()},function(e){
// error
console.log("ERROR:"+e)},function(e){}),l.modifyData=!1},l.delclient=function(e){l.modifyData=!0,confirm("Are you sure you want to DELETE this client?")&&(null==t.srvcDelclient(e)?console.log("client Id ["+e+"] has been deleted!"):console.log("ERROR: client Id ["+e+"] has NOT been deleted!")),l.modifyData=!1},l.modifyData=!1,l.gridOptions={enableColumnResizing:!0,enableSorting:!0,rowHeight:100,columnDefs:[{field:"img",cellTemplate:"<img width='120px' ng-src='{{grid.getCellValue(row, col)}}' lazy-src>"},{field:"name",displayName:"Name"},{field:"category",displayName:"Category"},{name:"edit",displayName:"Edit",cellTemplate:'<button id="editBtn" type="button" class="btn-small" ng-click="edit(row.entity)" >Edit</button> '}]},l.rowColor=["cyan","cream"],l};
// clientController Definiton
angular.module("app").controller("clientController",["$scope","clientService",e]),debug&&console.log("clientController defined")}(),/*****************************************************************************
 ** END OF FILE - client.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : volunteer.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";
// volunteerController Function
var e=function(e,t){debug&&console.log("volunteerController activated");var l=e;
// console.log(' volunteers = ', vm.volunteers);
// console.log('#volunteers = ', vm.volunteers.length);
// console.log(' volunteerCats = ', vm.volunteerCats);
// console.log('\nui-grid.Options = ', vm.gridOptions);
//////////////////////////////////////////////////////////////////////
// volunteers collection
//////////////////////////////////////////////////////////////////////
// GET All volunteers
//////////////////////////////////////////////////////////////////////
// ui-grid options
//////////////////////////////////////////////////////////////////////
return l.init=function(){l.volunteers=[],l.volunteerCats=[],l.sortOrder="id",l.volunteers=l.getAllV()},l.getAllV=function(){t.srvcGetAllVolunteers().then(function(e){
// success
l.volunteers=e,console.log("Number of volunteers returned = ["+l.volunteers.length+"]")},function(e){
// error
console.log("ERROR:"+e)},function(e){}).then(function(e){l.volunteerCats=_.uniq(_.pluck(l.volunteers,"category"))}),debug&&0!=l.volunteers.length&&console.log("volunteerController volunteers("+l.volunteers.length+")")},l.init(),l.addvolunteer=function(){var e=$modal.open({templateUrl:"/partials/volunteer/addvolunteer.html",controller:"volunteerController"});e.result.then(function(){
// success
l.getAllV()},function(e){
// error
l.getAllV()},function(e){}),l.modifyData=!1},l.editVolunteer=function(e){l.modifyData=!0,confirm("Do you want to save the changes?")&&t.srvcEditvolunteer(e).then(function(e){
// success
l.getAllV()},function(e){
// error
console.log("ERROR:"+e)},function(e){}),l.modifyData=!1},l.delVolunteer=function(e){l.modifyData=!0,confirm("Are you sure you want to DELETE this volunteer?")&&(null==t.srvcDelvolunteer(e)?console.log("volunteer Id ["+e+"] has been deleted!"):console.log("ERROR: volunteer Id ["+e+"] has NOT been deleted!")),l.modifyData=!1},l.modifyData=!1,l.gridOptions={enableColumnResizing:!0,enableSorting:!0,rowHeight:100,columnDefs:[{field:"img",cellTemplate:"<img width='120px' ng-src='{{grid.getCellValue(row, col)}}' lazy-src>"},{field:"name",displayName:"Name"},{field:"category",displayName:"Category"},{name:"edit",displayName:"Edit",cellTemplate:'<button id="editBtn" type="button" class="btn-small" ng-click="edit(row.entity)" >Edit</button> '}]},l.rowColor=["cyan","cream"],l};
// volunteerController Definiton
angular.module("app").controller("volunteerController",["$scope","volunteerService",e]),debug&&console.log("volunteerController defined")}(),/*****************************************************************************
 ** END OF FILE - volunteer.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : facility.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";
// facilityController Function
var e=function(e,t){debug&&console.log("facilityController activated");var l=e;
// console.log(' facilities = ', vm.facilities);
// console.log('#facilities = ', vm.facilities.length);
// console.log(' facilityCats = ', vm.facilityCats);
// console.log('\nui-grid.Options = ', vm.gridOptions);
//////////////////////////////////////////////////////////////////////
// facilities collection
//////////////////////////////////////////////////////////////////////
// GET All facilities
//////////////////////////////////////////////////////////////////////
// ui-grid options
//////////////////////////////////////////////////////////////////////
return l.init=function(){l.facilities=[],l.facilityCats=[],l.sortOrder="id",l.facilities=l.getAllV()},l.getAllV=function(){t.srvcGetAllFacilities().then(function(e){
// success
l.facilities=e,console.log("Number of facilities returned = ["+l.facilities.length+"]")},function(e){
// error
console.log("ERROR:"+e)},function(e){}).then(function(e){l.facilityCats=_.uniq(_.pluck(l.facilities,"category"))}),debug&&0!=l.facilities.length&&console.log("facilityController facilities("+l.facilities.length+")")},l.init(),l.addFacility=function(){var e=$modal.open({templateUrl:"/partials/facility/addfacility.html",controller:"facilityController"});e.result.then(function(){
// success
l.getAllV()},function(e){
// error
l.getAllV()},function(e){}),l.modifyData=!1},l.editFacility=function(e){l.modifyData=!0,confirm("Do you want to save the changes?")&&t.srvcEditFacility(e).then(function(e){
// success
l.getAllV()},function(e){
// error
console.log("ERROR:"+e)},function(e){}),l.modifyData=!1},l.delFacility=function(e){l.modifyData=!0,confirm("Are you sure you want to DELETE this facility?")&&(null==t.srvcDelFacility(e)?console.log("facility Id ["+e+"] has been deleted!"):console.log("ERROR: facility Id ["+e+"] has NOT been deleted!")),l.modifyData=!1},l.modifyData=!1,l.gridOptions={enableColumnResizing:!0,enableSorting:!0,rowHeight:100,columnDefs:[{field:"img",cellTemplate:"<img width='120px' ng-src='{{grid.getCellValue(row, col)}}' lazy-src>"},{field:"name",displayName:"Name"},{field:"category",displayName:"Category"},{name:"edit",displayName:"Edit",cellTemplate:'<button id="editBtn" type="button" class="btn-small" ng-click="edit(row.entity)" >Edit</button> '}]},l.rowColor=["cyan","cream"],l};
// facilityController Definiton
angular.module("app").controller("facilityController",["$scope","facilityService",e]),debug&&console.log("facilityController defined")}(),/*****************************************************************************
 ** END OF FILE - facility.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : sample.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";
// sampleController Function
var e=function(e,t){debug&&console.log("sampleController activated");var l=e;
// console.log(' samples = ', vm.samples);
// console.log('#samples = ', vm.samples.length);
// console.log(' sampleCats = ', vm.sampleCats);
// console.log('\nui-grid.Options = ', vm.gridOptions);
//////////////////////////////////////////////////////////////////////
// sample collection
//////////////////////////////////////////////////////////////////////
// GET All samples
//////////////////////////////////////////////////////////////////////
// ui-grid options
//////////////////////////////////////////////////////////////////////
return l.init=function(){l.samples=[],l.sampleCats=[],l.sortOrder="id",l.samples=l.getAllV()},l.getAllV=function(){t.srvcGetAllSamples().then(function(e){
// success
l.samples=e,console.log("Number of samples returned = ["+l.samples.length+"]")},function(e){
// error
console.log("ERROR:"+e)},function(e){}).then(function(e){l.sampleCats=_.uniq(_.pluck(l.samples,"category"))}),debug&&0!=l.samples.length&&console.log("sampleController samples("+l.samples.length+")")},l.init(),l.addSample=function(){var e=$modal.open({templateUrl:"/partials/sample/addsample.html",controller:"sampleController"});e.result.then(function(){
// success
l.getAllV()},function(e){
// error
l.getAllV()},function(e){}),l.modifyData=!1},l.editSample=function(e){l.modifyData=!0,confirm("Do you want to save the changes?")&&t.srvcEditSample(e).then(function(e){
// success
l.getAllV()},function(e){
// error
console.log("ERROR:"+e)},function(e){}),l.modifyData=!1},l.delSample=function(e){l.modifyData=!0,confirm("Are you sure you want to DELETE this samples?")&&(null==t.srvcDelSample(e)?console.log("sample Id ["+e+"] has been deleted!"):console.log("ERROR: sample Id ["+e+"] has NOT been deleted!")),l.modifyData=!1},l.modifyData=!1,l.gridOptions={enableColumnResizing:!0,enableSorting:!0,rowHeight:100,columnDefs:[{field:"img",cellTemplate:"<img width='120px' ng-src='{{grid.getCellValue(row, col)}}' lazy-src>"},{field:"name",displayName:"Name"},{field:"category",displayName:"Category"},{name:"edit",displayName:"Edit",cellTemplate:'<button id="editBtn" type="button" class="btn-small" ng-click="edit(row.entity)" >Edit</button> '}]},l.rowColor=["cyan","cream"],l};
// sampleController Definiton
angular.module("app").controller("sampleController",["$scope","sampleService",e]),debug&&console.log("sampleController defined")}(),/*****************************************************************************
 ** END OF FILE - sample.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : user.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";var e=function(e){debug&&console.log("userController activated"),e.items=["user","website"]};angular.module("app").controller("userController",["$scope",e]),debug&&console.log("userController defined")}(),/*****************************************************************************
 ** END OF FILE - user.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : directives.js
 **
 *****************************************************************************
 ****************************************************************************/
// Define your directives here. 
// Directives can be added to same module as the main 'app' 
// or a seperate module can be created.
/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:slide
 * @restrict EA
 *
 * @description
 * Creates a slide inside a {@link ui.bootstrap.carousel.directive:carousel carousel}.  Must be placed as a child of a carousel element.
 *
 * @param {boolean=} active Model binding, whether or not this slide is currently active.
 * @param {number=} index The index of the slide. The slides will be sorted by this parameter.
 *
 * @example
<example module="ui.bootstrap">
    <file name="index.html">
        <div ng-controller="CarouselDemoCtrl">
            <carousel>
                <slide ng-repeat="slide in slides" active="slide.active" index="$index">
                    <img ng-src="{{slide.image}}" style="margin:auto;">
                    <div class="carousel-caption">
                        <h4>Slide {{$index}}</h4>
                        <p>{{slide.text}}</p>
                    </div>
                </slide>
            </carousel>
            Interval, in milliseconds: <input type="number" ng-model="myInterval">
            <br />Enter a negative number to stop the interval.
        </div>
    </file>
    <file name="script.js">
        function CarouselDemoCtrl() {
            var vm = this;
            vm.myInterval = 5000;
        }
    </file>
    <file name="demo.css">
        .carousel-indicators {
            top: auto;
            bottom: 15px;
        }
    </file>
</example>
*/
function(){"use strict";angular.module("app").directive("photoFlip",function(){return{restrict:"E",replace:!0,
//templateURL: 'partials/photos/photo.test.html'
template:'<div>\n<input type="text" ng-model="model.input">\n<div>{{model.input}}</div>\n    \n</div>',link:function(e,t){e.$watch("model.input",function(e){"password"===e&&(console.log("change password."),t.children(1).toggleClass("alert-box alert"))})}}}),debug&&console.log('directive("photoFlip") defined')}(),/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:carousel
 * @restrict EA
 *
 * @description
 * Carousel is the outer container for a set of image 'slides' to showcase.
 *
 * @param {number=} interval The time, in milliseconds, that it will take 
 *     the carousel to go to the next slide.
 * @param {boolean=} noTransition Whether to disable transitions on the 
 *     carousel.
 * @param {boolean=} noPause Whether to disable pausing on the carousel 
 *    (by default, the carousel interval pauses on hover).
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <carousel>
      <slide>
        <img src="http://placekitten.com/150/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>Beautiful!</p>
        </div>
      </slide>
      <slide>
        <img src="http://placekitten.com/100/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>D'aww!</p>
        </div>
      </slide>
    </carousel>
  </file>
  <file name="demo.css">
    .carousel-indicators {
      top: auto;
      bottom: 15px;
    }
  </file>
</example>
*/
/*****************************************************************************
 ** END OF FILE - test.directive.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : filters.js
 **
 *****************************************************************************
 ****************************************************************************/
/*jshint -W109 */
// ignore double-quotes in between single-quotes
function(e){"use strict";angular.module("app").filter("noNulls",function(e){var t=[];if(e)for(var l=0;l<e.length;l++)""!==e[l].name&&t.push(e[l]);return console.log("filteredPhotos from noNulls"),console.log(t),t}),e&&console.log('filter("noNulls") defined'),angular.module("app").filter("hilights",function(e){var t=[];if(e)for(var l=0;l<e.length;l++)1==e[l].hilight&&t.push(e[l]);return console.log("filteredPhotos from hilights"),console.log(t),t}),e&&console.log('filter("hilights") defined')}(),/*****************************************************************************
 ** END OF FILE - filter.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : client.service.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";var e=(angular.module("app"),function(e,t){
// GET all clients
function l(){var l=t.defer();
// Make call to RESTFUL API
return e.get("json/client.json").success(function(e){s.clients=e,l.resolve(e)}).error(function(e,t){l.reject("Failed to get clients")}),l.promise}function n(){var e=s.clients,t=[];return e.length<1&&(e=l()),e.length>0&&(t=_.uniq(_.pluck(e,"category"))),s.clients=e,s.clientCats=t,t}
// get the selected index into the array
function o(e){if(e>=0)for(var t=0;t<s.clients.length;t++)if(s.clients[t].id==e)return t;return-1}
// GET a client
// pass in a client Id and get the client record
function i(e){var t=o(e);return t!=-1?(console.log("getAclient("+e+")("+t+") = ["+s.clients[t].name+"]"),s.clients[t]):(deferred.reject("client could not be found!"),null)}
// ADD
function r(l){var n=t.defer();
// Make call to RESTFUL API
return e.post("json/client.json",l).success(function(e){s.clients=e,n.resolve(e)}).error(function(e,t){n.reject("Failed to add client")}),n.promise}
// UPDATE
// pass in a client record and update the fields with the values
function a(e){var t=o(e.id);return t!=-1?(console.log("editclient("+id+")("+t+") changed:"),console.log("editclient( --- name     ["+s.clients[t].name+"] changed to ["+e.name+"]"),console.log("editclient( --- href     ["+s.clients[t].href+"] changed to ["+e.href+"]"),console.log("editclient( --- img      ["+s.clients[t].img+"] changed to ["+e.img+"]"),console.log("editclient( --- category ["+s.clients[t].category+"] changed to ["+e.category+"]"),s.clients[t].name=e.name,s.clients[t].href=e.href,s.clients[t].img=e.img,s.clients[t].category=e.category):console.log("Invalid client index ["+t+"]"),s.clients[t]}
// DELETE
function c(e){var t=o(e);return t!=-1?(console.log("delclient("+e+")("+t+") deleted:"),console.log("delclient( --- name     ["+s.clients[t].name+"] deleted"),console.log("delclient( --- href     ["+s.clients[t].href+"] deleted"),console.log("delclient( --- img      ["+s.clients[t].img+"] deleted"),console.log("delclient( --- category ["+s.clients[t].category+"] deleted"),s.clients.splice(t,1),null):void console.log("Invalid client index ["+t+"]")}var s={clients:[],clientCats:[],srvcGetAllclients:l,srvcGetclientCats:n,srvcGetSelectedIndex:o,srvcGetAclient:i,srvcAddclient:r,srvcEditclient:a,srvcDelclient:c};return s});
// clientService Definiton
angular.module("app").service("clientService",["$http","$q",e])}(),/*****************************************************************************
 ** END OF FILE - client.service.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : volunteer.service.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";var e=(angular.module("app"),function(e,t){
// GET all volunteers
function l(){var l=t.defer();
// Make call to RESTFUL API
return e.get("json/volunteer.json").success(function(e){s.volunteers=e,l.resolve(e)}).error(function(e,t){l.reject("Failed to get volunteers")}),l.promise}function n(){var e=s.volunteers,t=[];return e.length<1&&(e=srvcGetAllvolunteers()),e.length>0&&(t=_.uniq(_.pluck(e,"category"))),s.volunteers=e,s.volunteerCats=t,t}
// get the selected index into the array
function o(e){if(e>=0)for(var t=0;t<s.volunteers.length;t++)if(s.volunteers[t].id==e)return t;return-1}
// GET a volunteer
// pass in a volunteer Id and get the volunteer record
function i(e){var t=o(e);return t!=-1?(console.log("getAvolunteer("+e+")("+t+") = ["+s.volunteers[t].name+"]"),s.volunteers[t]):(deferred.reject("volunteer could not be found!"),null)}
// ADD
function r(l){var n=t.defer();
// Make call to RESTFUL API
return e.post("json/volunteer.json",l).success(function(e){s.volunteers=e,n.resolve(e)}).error(function(e,t){n.reject("Failed to add volunteer")}),n.promise}
// UPDATE
// pass in a volunteer record and update the fields with the values
function a(e){var t=o(e.id);return t!=-1?(console.log("editvolunteer("+id+")("+t+") changed:"),console.log("editvolunteer( --- name     ["+s.volunteers[t].name+"] changed to ["+e.name+"]"),console.log("editvolunteer( --- href     ["+s.volunteers[t].href+"] changed to ["+e.href+"]"),console.log("editvolunteer( --- img      ["+s.volunteers[t].img+"] changed to ["+e.img+"]"),console.log("editvolunteer( --- category ["+s.volunteers[t].category+"] changed to ["+e.category+"]"),s.volunteers[t].name=e.name,s.volunteers[t].href=e.href,s.volunteers[t].img=e.img,s.volunteers[t].category=e.category):console.log("Invalid volunteer index ["+t+"]"),s.volunteers[t]}
// DELETE
function c(e){var t=o(e);return t!=-1?(console.log("delvolunteer("+e+")("+t+") deleted:"),console.log("delvolunteer( --- name     ["+s.volunteers[t].name+"] deleted"),console.log("delvolunteer( --- href     ["+s.volunteers[t].href+"] deleted"),console.log("delvolunteer( --- img      ["+s.volunteers[t].img+"] deleted"),console.log("delvolunteer( --- category ["+s.volunteers[t].category+"] deleted"),s.volunteers.splice(t,1),null):void console.log("Invalid volunteer index ["+t+"]")}var s={volunteers:[],volunteerCats:[],srvcGetAllVolunteers:l,srvcGetVolunteerCats:n,srvcGetSelectedIndex:o,srvcGetAVolunteer:i,srvcAddVolunteer:r,srvcEditVolunteer:a,srvcDelVolunteer:c};return s});
// volunteerService Definiton
angular.module("app").service("volunteerService",["$http","$q",e])}(),/*****************************************************************************
 ** END OF FILE - volunteer.service.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : facility.service.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";var e=(angular.module("app"),function(e,t){
// GET all facilities
function l(){var l=t.defer();
// Make call to RESTFUL API
return e.get("json/facility.json").success(function(e){s.facilities=e,l.resolve(e)}).error(function(e,t){l.reject("Failed to get facilities")}),l.promise}function n(){var e=s.facilities,t=[];return e.length<1&&(e=srvcGetAllfacilities()),e.length>0&&(t=_.uniq(_.pluck(e,"category"))),s.facilities=e,s.facilityCats=t,t}
// get the selected index into the array
function o(e){if(e>=0)for(var t=0;t<s.facilities.length;t++)if(s.facilities[t].id==e)return t;return-1}
// GET a facility
// pass in a facility Id and get the facility record
function i(e){var t=o(e);return t!=-1?(console.log("getAFacility("+e+")("+t+") = ["+s.facilities[t].name+"]"),s.facilities[t]):(deferred.reject("Facility could not be found!"),null)}
// ADD
function r(l){var n=t.defer();
// Make call to RESTFUL API
return e.post("json/facility.json",l).success(function(e){s.facilities=e,n.resolve(e)}).error(function(e,t){n.reject("Failed to add facility")}),n.promise}
// UPDATE
// pass in a facility record and update the fields with the values
function a(e){var t=o(e.id);return t!=-1?(console.log("editFacility("+id+")("+t+") changed:"),console.log("editFacility( --- name     ["+s.facilities[t].name+"] changed to ["+e.name+"]"),console.log("editFacility( --- href     ["+s.facilities[t].href+"] changed to ["+e.href+"]"),console.log("editFacility( --- img      ["+s.facilities[t].img+"] changed to ["+e.img+"]"),console.log("editFacility( --- category ["+s.facilities[t].category+"] changed to ["+e.category+"]"),s.facilities[t].name=e.name,s.facilities[t].href=e.href,s.facilities[t].img=e.img,s.facilities[t].category=e.category):console.log("Invalid facility index ["+t+"]"),s.facilities[t]}
// DELETE
function c(e){var t=o(e);return t!=-1?(console.log("delFacility("+e+")("+t+") deleted:"),console.log("delFacility( --- name     ["+s.facility[t].name+"] deleted"),console.log("delFacility( --- href     ["+s.facility[t].href+"] deleted"),console.log("delFacility( --- img      ["+s.facility[t].img+"] deleted"),console.log("delFacility( --- category ["+s.facility[t].category+"] deleted"),s.facility.splice(t,1),null):void console.log("Invalid facility index ["+t+"]")}var s={facilities:[],facilityCats:[],srvcGetAllFacilities:l,srvcGetFacilityCats:n,srvcGetSelectedIndex:o,srvcGetAFacility:i,srvcAddFacility:r,srvcEditFacility:a,srvcDelFacility:c};return s});
// facilityService Definiton
angular.module("app").service("facilityService",["$http","$q",e])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsbGpzLm1pbi5qcyJdLCJuYW1lcyI6WyJnZXRDYWxlbmRhckhUTUwiLCJtbyIsInlyIiwic2hvd1RvZGF5IiwiTSIsIkFycmF5IiwiRCIsImRheU9uZSIsIkRhdGUiLCJkeSIsImdldERheSIsImV2YWwiLCJkIiwiTWF0aCIsImZsb29yIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwicG9zIiwibGQiLCJ0ZGF5IiwiZ2V0RGF0ZSIsImRvdyIsImh0bWxUZXh0IiwiaSIsImN0ciIsInNob3dDYWxlbmRlcnMiLCJ0b2RheSIsInRoaXNNb250aCIsImdldE1vbnRoIiwidGhpc1llYXIiLCJnZXRZZWFyIiwibGFzdE1vbnRoIiwibGFzdFllYXIiLCJuZXh0WWVhciIsIm5leHRNb250aCIsImxhc3RNb25IdG1sIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInRoaXNNb25IdG1sIiwibmV4dE1vbkh0bWwiLCJpbm5lckhUTUwiLCJnZWJJRCIsImlkIiwiZ2ViVE4iLCJ0YWdOYW1lIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzZXRTdHlsZVRvVGFncyIsInN0eWxlU3RyaW5nIiwidGFncyIsInNldEF0dHJpYnV0ZSIsInRlc3RTaXplcyIsInBhcmVudE9iaiIsInNjcmVlbiIsIndpZHRoIiwidG9TdHJpbmciLCJoZWlnaHQiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImRpc3BsYXlTaXplcyIsInRhYmxlIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInNldEludGVydmFsIiwic29ydEJ5S2V5IiwiYXJyYXkiLCJrZXkiLCJzb3J0IiwiYSIsImIiLCJ4IiwieSIsIm11bHRPYmpBcnJheTJBcnJheSIsIm11bHRPYmpBcnJheSIsImFsbEFycmF5IiwiaiIsInB1c2giLCJKU09ORGF0ZVRvRGF0ZU9iaiIsImpkIiwic3Vic3RyIiwic2V0RnVsbFllYXIiLCJzZXRIb3VycyIsInNldE1pbnV0ZXMiLCJzZXRTZWNvbmRzIiwic2V0TWlsbGlzZWNvbmRzIiwiZWRpdEltYWdlRGF0YSIsImltZ0lEIiwiYWxlcnQiLCJkZWxldGVJbWFnZSIsImVubGFyZ2VUb2dnbGUiLCJyZXNpemVQYWdlIiwiJCIsInJlYWR5IiwiY29uc29sZSIsImxvZyIsIm5ld0hlaWdodCIsImNzcyIsInRpbWVkTG9vcCIsInNlY3MiLCJzZXRUaW1lb3V0IiwiZGVidWciLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJHN0YXRlUHJvdmlkZXIiLCJzdGF0ZSIsImNvbnRyb2xsZXIiLCJ0ZW1wbGF0ZVVybCIsInVybCIsIndoZW4iLCJvdGhlcndpc2UiLCJydW4iLCIkcm9vdFNjb3BlIiwiJHN0YXRlIiwiJHN0YXRlUGFyYW1zIiwic3RhdGVQYXJhbXMiLCJwYWdlTG9hZGVkIiwiZW5kUG9pbnQiLCJhYm91dENvbnRyb2xsZXIiLCIkc2NvcGUiLCJpdGVtcyIsInZtIiwibG9nZ2VkSW4iLCJ1c2VyTmFtZSIsImNsaWVudENvbnRyb2xsZXIiLCJjbGllbnRTZXJ2aWNlIiwiaW5pdCIsImNsaWVudHMiLCJjbGllbnRDYXRzIiwic29ydE9yZGVyIiwiZ2V0QWxsViIsInNydmNHZXRBbGxjbGllbnRzIiwidGhlbiIsInJlc3BvbnNlIiwiZXJyIiwibXNnIiwiXyIsInVuaXEiLCJwbHVjayIsImFkZGNsaWVudCIsIm1vZGFsSW5zdGFuY2UiLCIkbW9kYWwiLCJvcGVuIiwicmVzdWx0IiwibW9kaWZ5RGF0YSIsImVkaXRjbGllbnQiLCJjbGllbnQiLCJjb25maXJtIiwic3J2Y0VkaXRjbGllbnQiLCJkZWxjbGllbnQiLCJzcnZjRGVsY2xpZW50IiwiZ3JpZE9wdGlvbnMiLCJlbmFibGVDb2x1bW5SZXNpemluZyIsImVuYWJsZVNvcnRpbmciLCJyb3dIZWlnaHQiLCJjb2x1bW5EZWZzIiwiZmllbGQiLCJjZWxsVGVtcGxhdGUiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJyb3dDb2xvciIsInZvbHVudGVlckNvbnRyb2xsZXIiLCJ2b2x1bnRlZXJTZXJ2aWNlIiwidm9sdW50ZWVycyIsInZvbHVudGVlckNhdHMiLCJzcnZjR2V0QWxsVm9sdW50ZWVycyIsImFkZHZvbHVudGVlciIsImVkaXRWb2x1bnRlZXIiLCJ2b2x1bnRlZXIiLCJzcnZjRWRpdHZvbHVudGVlciIsImRlbFZvbHVudGVlciIsInNydmNEZWx2b2x1bnRlZXIiLCJmYWNpbGl0eUNvbnRyb2xsZXIiLCJmYWNpbGl0eVNlcnZpY2UiLCJmYWNpbGl0aWVzIiwiZmFjaWxpdHlDYXRzIiwic3J2Y0dldEFsbEZhY2lsaXRpZXMiLCJhZGRGYWNpbGl0eSIsImVkaXRGYWNpbGl0eSIsImZhY2lsaXR5Iiwic3J2Y0VkaXRGYWNpbGl0eSIsImRlbEZhY2lsaXR5Iiwic3J2Y0RlbEZhY2lsaXR5Iiwic2FtcGxlQ29udHJvbGxlciIsInNhbXBsZVNlcnZpY2UiLCJzYW1wbGVzIiwic2FtcGxlQ2F0cyIsInNydmNHZXRBbGxTYW1wbGVzIiwiYWRkU2FtcGxlIiwiZWRpdFNhbXBsZSIsInNhbXBsZSIsInNydmNFZGl0U2FtcGxlIiwiZGVsU2FtcGxlIiwic3J2Y0RlbFNhbXBsZSIsInVzZXJDb250cm9sbGVyIiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwidGVtcGxhdGUiLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiJHdhdGNoIiwidmFsdWUiLCJjaGlsZHJlbiIsInRvZ2dsZUNsYXNzIiwiZmlsdGVyIiwiUGhvdG9zIiwiZmlsdGVyZWRQaG90b3MiLCJoaWxpZ2h0IiwiJGh0dHAiLCIkcSIsImRlZmVycmVkIiwiZGVmZXIiLCJnZXQiLCJzdWNjZXNzIiwiZGF0YSIsInNlcnZpY2UiLCJyZXNvbHZlIiwiZXJyb3IiLCJzdGF0dXMiLCJyZWplY3QiLCJwcm9taXNlIiwic3J2Y0dldGNsaWVudENhdHMiLCJzcnZjR2V0U2VsZWN0ZWRJbmRleCIsInNydmNHZXRBY2xpZW50IiwiaWR4Iiwic3J2Y0FkZGNsaWVudCIsInBvc3QiLCJocmVmIiwiaW1nIiwiY2F0ZWdvcnkiLCJzcGxpY2UiLCJzcnZjR2V0Vm9sdW50ZWVyQ2F0cyIsInNydmNHZXRBbGx2b2x1bnRlZXJzIiwic3J2Y0dldEFWb2x1bnRlZXIiLCJzcnZjQWRkVm9sdW50ZWVyIiwic3J2Y0VkaXRWb2x1bnRlZXIiLCJzcnZjRGVsVm9sdW50ZWVyIiwic3J2Y0dldEZhY2lsaXR5Q2F0cyIsInNydmNHZXRBbGxmYWNpbGl0aWVzIiwic3J2Y0dldEFGYWNpbGl0eSIsInNydmNBZGRGYWNpbGl0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUF1T0ksUUFBU0EsaUJBQWdCQyxHQUFJQyxHQUFJQzs7OztBQUk3QixHQUFJQyxHQUFJLEdBQUlDLE9BQU0sVUFBVSxXQUFXLFFBQVEsUUFBUSxNQUFNLE9BQU8sT0FDcEQsU0FBUyxZQUFZLFVBQVUsV0FBVyxZQUV0REMsRUFBSSxHQUFJRCxPQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE9BRWxERSxPQUFTLEdBQUlDLE1BQUtKLEVBQUVILElBQUksTUFBTUMsSUFFOUJPLEdBQUtGLE9BQU9HLFFBQ2hCUixJQUFLUyxLQUFLVDs7QUFHVixHQUFJVSxHQUFJOztBQUVKVixHQUFLLElBQU1XLEtBQUtDLE1BQU1aLEdBQUssS0FDM0JVLEVBQUlBLEVBQUVHLFVBQVUsRUFBRyxHQUFLLEtBQU9ILEVBQUVHLFVBQVUsRUFBR0gsRUFBRUk7O0FBR3BELEdBQUlDLEtBQVksRUFBTGhCLEdBRVBpQixHQUFLUCxLQUFLQyxFQUFFRyxVQUFVRSxJQUFLQSxJQUFNLElBQ2pDRSxNQUFPLEdBQUlYLE9BQU9ZLFVBQ2xCQyxLQUFNLEdBQUliLE9BQU9FLFNBSWpCWSxTQUFXOztBQUVmQSxVQUFZLHFCQUNUbkIsWUFBV21CLFVBQVksV0FDMUJBLFVBQVksc0JBQXdCbEIsRUFBRUgsSUFBTSxJQUFNQyxHQUFLOztBQUV2RG9CLFVBQVksTUFDWixL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T21DOztBQUlYckgsUUFDS0MsT0FBTyxPQUNQb0gsUUFBUSxtQkFDTCxRQUNBLEtBQ0E1QyIsImZpbGUiOiJhbGxqcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqXHJcbiAqKiBAbmdkb2Mgb3ZlcnZpZXdcclxuICoqIEBuYW1lIGFwcC5qc1xyXG4gKipcclxuICoqIEBkZXNjcmlwdGlvblxyXG4gKiogbWFpbiBBbmd1bGFySlMgYXBwbGljYXRpb24gZGVmaW5pdGlvbiBmaWxlIC0gbG9hZHMgYWxsIHBsdWdpbnMgdGhhdCB3aWxsIFxyXG4gKiogYmUgYSBwYXJ0IG9mIHRoZSBtb2R1bGUuXHJcbiAqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgIFxyXG4vLyBHbG9iYWwgZGVidWcgZmxhZyAocGFzc2VkIHRvIG90aGVyIG1vZHVsZXMpXHJcbnZhciBkZWJ1ZyA9IHRydWU7XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8vIERlZmluZSBtYWluIG1vZHVsZS5cclxuICAgIHZhciBuZ0FwcCA9IGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnLCBcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgJ25nQW5pbWF0ZScsXHJcbiAgICAgICAgICAgICAgICAnbmdSZXNvdXJjZScsXHJcbiAgICAgICAgICAgICAgICAnbmdUb3VjaCcsXHJcbiAgICAgICAgICAgICAgICAndWknLFxyXG4gICAgICAgICAgICAgICAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgICAgICAgICAgICAgICAndWkuYm9vdHN0cmFwLmNhcm91c2VsJyxcclxuICAgICAgICAgICAgICAgICd1aS5ib290c3RyYXAucHJvZ3Jlc3NiYXInLFxyXG4gICAgICAgICAgICAgICAgJ3VpLmdyaWQnLFxyXG4gICAgICAgICAgICAgICAgJ3VpLmdyaWQuZWRpdCcsXHJcbiAgICAgICAgICAgICAgICAndWkuZ3JpZC5jZWxsTmF2JyxcclxuICAgICAgICAgICAgICAgICd1aS5ncmlkLnJlc2l6ZUNvbHVtbnMnLFxyXG4gICAgICAgICAgICAgICAgJ3VpLmdyaWQucGlubmluZycsXHJcbiAgICAgICAgICAgICAgICAndWkuZ3JpZC5zZWxlY3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgJ3VpLmdyaWQubW92ZUNvbHVtbnMnLFxyXG4gICAgICAgICAgICAgICAgJ3VpLmdyaWQuZXhwb3J0ZXInLFxyXG4gICAgICAgICAgICAgICAgJ3VpLmdyaWQuaW1wb3J0ZXInLFxyXG4gICAgICAgICAgICAgICAgJ3VpLmdyaWQuZ3JvdXBpbmcnLFxyXG4gICAgICAgICAgICAgICAgJ3VpLnJvdXRlcicsXHJcbiAgICAgICAgICAgICAgICAndWkuc29ydGFibGUnXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICApO1xyXG5cclxuICAgIGlmKGRlYnVnKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnYW5ndWxhci5tb2R1bGUoYXBwKSBkZWZpbmVkJyk7XHJcbiAgICB9XHJcblxyXG5cclxufSgpKTtcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiogRU5EIE9GIEZJTEUgLSBhcHAuanNcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKlxyXG4gKiogRmlsZW5hbWUgICAgOiBhcHAuY29uZmlnLmpzXHJcbiAqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLy8gTmF2aWdhdGlvbiBpcyBzdXBwbGllZCB2aWEgdGhlIGZvbGxvd2luZyB1aS1yb3V0ZXIgc2VjdGlvblxyXG4gICAgLy8gXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29uZmlnKCBbICAgJyR1cmxSb3V0ZXJQcm92aWRlcicsICckc3RhdGVQcm92aWRlcicsXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIsICAgJHN0YXRlUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXJcclxuXHJcbiAgICAgICAgICAgICAgICAvLyB1cmwgLSBtYXRjaGVzIHRoZSB1aS1zcmVmIG9uIHRoZSBpbmRleC5odG1sIHBhZ2VcclxuICAgICAgICAgICAgICAgIC8vIHRlbXBsYXRlVXJsIC0gbWF0Y2hlcyB0aGUgbG9jYXRpb24gb2YgdGhlIHBhcnRpYWwgaHRtbCBmaWxlXHJcbiAgICAgICAgICAgICAgICAvLyBjb250cm9sbGVyIC0gbWF0Y2hlcyB0aGUgbmFtZSBvZiB0aGUgY29udHJvbGxlciBhc3NvY2lhdGVkIHdpdGggdGhpcyBwYWdlXHJcbiAgICAgICAgICAgICAgICAvLyBzZXJ2aWNlIC0gaWRlbnRpZmllcyB0aGUgc2VydmljZSB1c2VkIHRvIGdldCB0aGUgZGF0YSBuZWVkZWQgZm9yIHRoaXMgcGFnZS5cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBUbyBiZSBkaXNwbGF5ZWQgb24gbWFpbiBzY3JlZW46XHJcbiAgICAgICAgICAgICAgICAvLyAkc3RhdGUgICAgICAgICAgPSB7eyAkc3RhdGUuY3VycmVudC5uYW1lIH19XHJcbiAgICAgICAgICAgICAgICAvLyAkc3RhdGVQYXJhbXMgICAgPSB7eyAkc3RhdGVQYXJhbXMgfX1cclxuICAgICAgICAgICAgICAgIC8vICRzdGF0ZSBmdWxsIHVybCA9IHt7ICRzdGF0ZS4kY3VycmVudC51cmwuc291cmNlIH19XHJcbiAgICAgICAgICAgICAgICAvLyAkc3RhdGVQcm92aWRlciAgPSB7eyAkc3RhdGVQcm92aWRlciB9fVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvKiBIb21lICovXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoJ2hvbWUnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2hvbWVDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2hvbWUvaG9tZS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvaG9tZSdcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgLyogZmFjaWxpdGllcyAqLyAgICBcclxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnZmFjaWxpdHknLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2ZhY2lsaXR5Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9mYWNpbGl0eS9mYWNpbGl0eS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvZmFjaWxpdHknXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIC8qIGNsaWVudCAqL1xyXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdjbGllbnQnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2NsaWVudENvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvY2xpZW50L2NsaWVudC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvY2xpZW50J1xyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAvKiB2b2x1bnRlZXJzICovXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoJ3ZvbHVudGVlcicsIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndm9sdW50ZWVyQ29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy92b2x1bnRlZXIvdm9sdW50ZWVyLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy92b2x1bnRlZXInXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIC8qIHNhbXBsZSAqL1xyXG4gICAgICAgICAgICAgICAgLnN0YXRlKCdzYW1wbGUnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NhbXBsZUNvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvc2FtcGxlL3NhbXBsZS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvc2FtcGxlJ1xyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAvKiBzYW1wbGUgKi9cclxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnc2FtcGxlMicsIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2FtcGxlQ29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9zYW1wbGUvc2FtcGxlMi5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvc2FtcGxlMidcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgLyogTG9naW4gKi9cclxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnbG9naW4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3VzZXJDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2FjY291bnQvbG9naW4uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2xvZ2luJ1xyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAvKiBMb2dvdXQgKi9cclxuICAgICAgICAgICAgICAgIC5zdGF0ZSgnbG9nb3V0Jywge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvYWNjb3VudC9sb2dvdXQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2xvZ291dCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICR1cmxSb3V0ZXJQcm92aWRlclxyXG4gICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgKiogVGhlIGB3aGVuYCBtZXRob2Qgc2F5cyBpZiB0aGUgdXJsIGlzIGV2ZXIgdGhlIDFzdCBwYXJhbSwgdGhlbiByZWRpcmVjdCB0byB0aGUgMm5kIHBhcmFtXHJcbiAgICAgICAgICAgICAgICAgICAgKiogSGVyZSB3ZSBhcmUganVzdCBzZXR0aW5nIHVwIHNvbWUgY29udmVuaWVuY2UgdXJscy5cclxuICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgIC53aGVuKCcvZmFjaWxpdHkvOmZhY2lsaXR5TmFtZScsICcvcGFydGlhbHMvZmFjaWxpdHkvOmlkJylcclxuICAgICAgICAgICAgICAgICAgICAud2hlbignL3ZvbHVudGVlci86dm9sdW50ZWVyTmFtZScsICcvcGFydGlhbHMvdm9sdW50ZWVyLzppZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLndoZW4oJy9jbGllbnQvOmNsaWVudE5hbWUnLCAnL3BhcnRpYWxzL2NsaWVudC86aWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgKiogSWYgdGhlIHVybCBpcyBldmVyIGludmFsaWQsIGUuZy4gJy9hc2RmJywgdGhlbiByZWRpcmVjdCB0byAnLycgYWthIHRoZSBob21lIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgICAgICAub3RoZXJ3aXNlKCcvaG9tZScpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF0pO1xyXG5cclxuICAgIGlmKGRlYnVnKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnICAgICAgIC5jb25maWcoW1wiJHVybFJvdXRlclByb3ZpZGVyXCIsIFwiJHN0YXRlUHJvdmlkZXJcIl0pIGRlZmluZWQnKTtcclxuICAgIH1cclxuXHJcblxyXG59KCkpO1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKiBFTkQgT0YgRklMRSAtIGFwcC5jb25maWcuanNcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKlxyXG4gKiogRmlsZW5hbWUgICAgOiBhcHAucnVuLmpzXHJcbiAqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAucnVuKFxyXG4gICAgICAgIFsgICAgICAgICAgICAnJHJvb3RTY29wZScsICckc3RhdGUnLCAnJHN0YXRlUGFyYW1zJyxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKCRyb290U2NvcGUsICAgJHN0YXRlLCAgICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgLyogSXQncyB2ZXJ5IGhhbmR5IHRvIGFkZCByZWZlcmVuY2VzIHRvICRzdGF0ZSBhbmQgJHN0YXRlUGFyYW1zIHRvIHRoZSAkcm9vdFNjb3BlXHJcbiAgICAgICAgICAgICAgICAqKiBzbyB0aGF0IHlvdSBjYW4gYWNjZXNzIHRoZW0gZnJvbSBhbnkgc2NvcGUgd2l0aGluIHlvdXIgYXBwbGljYXRpb25zLlxyXG4gICAgICAgICAgICAgICAgKiogRm9yIGV4YW1wbGUsIDxsaSBuZy1jbGFzcz0neyBhY3RpdmU6ICRzdGF0ZS5pbmNsdWRlcygnY29udGFjdHMubGlzdCcpIH0nPiB3aWxsXHJcbiAgICAgICAgICAgICAgICAqKiBzZXQgdGhlIDxsaT4gdG8gYWN0aXZlIHdoZW5ldmVyICdjb250YWN0cy5saXN0JyBvciBvbmUgb2YgaXRzIGRlY2VuZGVudHMgaXMgYWN0aXZlLlxyXG4gICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZSA9ICRzdGF0ZTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVQYXJhbXMgPSAkc3RhdGVQYXJhbXM7XHJcblxyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5wYWdlTG9hZGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihkZWJ1Zyl7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5kZWJ1ZyA9IGRlYnVnO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuZW5kUG9pbnQgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5lbmRQb2ludCA9ICdodHRwOi8vcmVzZXgub3JnJztcclxuICAgICAgICAgICAgICAgIH0gICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdKTtcclxuXHJcbiAgICBpZihkZWJ1Zyl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJyAgICAgICAucnVuKFtcIiRyb290U2NvcGVcIixcIiRzdGF0ZVwiLFwiJHN0YXRlUGFyYW1zXCIsZnVuY3Rpb24gKCRyb290U2NvcGUsJHN0YXRlLCRzdGF0ZVBhcmFtcykgZXhlY3V0ZWQnKTtcclxuICAgIH1cclxuXHJcbn0oKSk7XHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqIEVORCBPRiBGSUxFIC0gYXBwLnJ1bi5qc1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqXHJcbiAqKiBGaWxlbmFtZSAgICA6IG1pc2MuanNcclxuICoqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuLypqc2hpbnQgLVcwNjEgKi8gLy8gaWdub3JlIGV2YWwgY2FuIGJlIGhhcm1mdWxcclxuXHJcblxyXG4gICAgLy8gJCgndWwuZHJvcGRvd24tbWVudScpLmZpbmQoJ2xpJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gICAgIC8vIHJlbW92ZSB0aGUgJ29wZW4nIGNsYXNzIG9uIHRoZSBwYXJlbnQgZWxlbWVudCBcclxuICAgIC8vICAgICAkKHRoaXMpLnBhcmVudHMoJy5kcm9wZG93bi1tZW51JykucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcclxuICAgIC8vICAgICAkKHRoaXMpLnBhcmVudHMoJy5kcm9wZG93bi1tZW51JykucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgLy8gfSk7XHJcblxyXG4vLyhmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBNaXNjZWxsYW5lb3VzIENhbGVuZGFyIGZ1bmN0aW9uc1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJIVE1MKG1vLCB5ciwgc2hvd1RvZGF5KXtcclxuICAgICAgICAvLyBtbyA9IHplcm8tYmFzZWQgbW9udGggbnVtYmVyXHJcbiAgICAgICAgLy8geXIgPSA0IGRpZ2l0IHllYXIgWVlZWVxyXG4gICAgICAgIC8vIENyZWF0ZSBhbiBhcnJheSBjb250YWluaW5nIHRoZSBtb250aCBuYW1lc1xyXG4gICAgICAgIHZhciBNID0gbmV3IEFycmF5KCdKYW51YXJ5JywnRmVicnVhcnknLCdNYXJjaCcsJ0FwcmlsJywnTWF5JywnSnVuZScsJ0p1bHknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQXVndXN0JywnU2VwdGVtYmVyJywnT2N0b2JlcicsJ05vdmVtYmVyJywnRGVjZW1iZXInKTtcclxuICAgICAgICAvLyBDcmVhdGUgYW4gYXJyYXkgd2l0aCB0aGUgZGF5cyBvZiB0aGUgd2Vla1xyXG4gICAgICAgIHZhciBEID0gbmV3IEFycmF5KCdTdW4nLCdNb24nLCdUdWUnLCdXZWQnLCdUaHUnLCdGcmknLCdTYXQnKTtcclxuICAgICAgICAvLyBUaGUgZmlyc3Qgb2YgdGhlIG1vbnRoXHJcbiAgICAgICAgdmFyIGRheU9uZSA9IG5ldyBEYXRlKE1bbW9dKycgMSwnK3lyKTtcclxuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGRheSBvZiB0aGUgd2VlayB1cG9uIHdoaWNoIHRoZSAxc3Qgb2YgdGhlIG1vbnRoIGZhbGxzXHJcbiAgICAgICAgdmFyIGR5ID0gZGF5T25lLmdldERheSgpO1xyXG4gICAgICAgIHlyID0gZXZhbCh5cik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gRGF5cyBpbiBlYWNoIG1vbnRoXHJcbiAgICAgICAgdmFyIGQgPSAnMzEyODMxMzAzMTMwMzEzMTMwMzEzMDMxJztcclxuICAgICAgICAvLyBJcyB0aGlzIGxlYXAgeWVhcj9cclxuICAgICAgICBpZiAoeXIgLyA0ID09PSBNYXRoLmZsb29yKHlyIC8gNCkpIHtcclxuICAgICAgICAgICAgZCA9IGQuc3Vic3RyaW5nKDAsIDIpICsgJzI5JyArIGQuc3Vic3RyaW5nKDQsIGQubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBpbiB0aGUgZCBzdHJpbmcgZm9yIHRoaXMgbW9udGhcclxuICAgICAgICB2YXIgcG9zID0gKG1vICogMik7XHJcbiAgICAgICAgLy8gR3JhYiAyIGNoYXJhY3RlciBwb3NpdGlvbnMgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIG1vbnRoIChsYXN0IGRheSlcclxuICAgICAgICB2YXIgbGQgPSBldmFsKGQuc3Vic3RyaW5nKHBvcywgcG9zICsgMikpO1xyXG4gICAgICAgIHZhciB0ZGF5ID0gbmV3IERhdGUoKS5nZXREYXRlKCk7XHJcbiAgICAgICAgdmFyIGRvdyA9IG5ldyBEYXRlKCkuZ2V0RGF5KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU3RhcnQgb3V0cHV0dGluZyB0aGlzIG1vbnRoJ3MgY2FsZW5kYXJcclxuICAgICAgICAvL3ZhciBodG1sVGV4dCA9ICAnPGRpdiBjbGFzcz1cImNvbC1sZy00IGNvbC1tZC00IGNvbC1zbS00IGNvbC14cy00XCI+JztcclxuICAgICAgICB2YXIgaHRtbFRleHQgPSAnPHRhYmxlIGNsYXNzPVwiY2FsVGFibGVcIj48dHI+JztcclxuICAgICAgICAvLyBEaXNwbGF5IHRoZSBtb250aCBhbmQgeWVhclxyXG4gICAgICAgIGh0bWxUZXh0ICs9ICc8dGggY2xhc3M9XCJtb25IZHJcIic7XHJcbiAgICAgICAgaWYoc2hvd1RvZGF5KXtodG1sVGV4dCArPSAnIGhpTGl0ZSc7fVxyXG4gICAgICAgIGh0bWxUZXh0ICs9ICdcIiBjb2xzcGFuPTcgY2VudGVyPicgKyBNW21vXSArICcgJyArIHlyICsgJzwvdGg+PC90cj4nO1xyXG4gICAgICAgIC8vIERpc3BsYXkgdGhlIGRheXMgb2YgdGhlIHdlZWtcclxuICAgICAgICBodG1sVGV4dCArPSAnPHRyPic7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7aSA8IDc7aSArKykge1xyXG4gICAgICAgICAgICBpZigoaSA9PSBkb3cpICYmIChzaG93VG9kYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbFRleHQgKz0gJzx0ZCBjbGFzcz1cIndrZGF5SGRyIGhpTGl0ZVwiPic7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWxUZXh0ICs9ICc8dGQgY2xhc3M9XCJ3a2RheUhkclwiPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBodG1sVGV4dCArPSBEW2ldICsgJzwvdGQ+JzsgICAgICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgdGhlIGRheXMgb2YgdGhlIHdlZWtcclxuICAgICAgICB9XHJcbiAgICAgICAgaHRtbFRleHQgKz0gJzwvdHI+JztcclxuICAgICAgICB2YXIgY3RyID0gMDtcclxuICAgICAgICAvLyBEaXNwbGF5IHRoZSBkYXkgb2YgdGhlIG1vbnRoIG9yIGEgYmxhbmsgaWYgdGhlIDFzdCBmYWxscyBpbiBtaWQtd2Vla1xyXG4gICAgICAgIGh0bWxUZXh0ICs9ICc8dHIgY2xhc3M9XCJjYWxEYXlSb3dcIj4nO1xyXG4gICAgICAgIC8vIERpc3BsYXkgdGhlIGRheSBvZiB0aGUgbW9udGggb3IgYSBibGFuayBzcGFjZVxyXG4gICAgICAgIC8vIGZvciB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgbW9udGhcclxuICAgICAgICBmb3IgKGkgPSAwO2kgPCA3OyBpKyspe1xyXG4gICAgICAgICAgICBpZiAoaSA8IGR5KSB7XHJcbiAgICAgICAgICAgICAgICBodG1sVGV4dCArPSAnPHRkPiA8L3RkPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdHIrKztcclxuICAgICAgICAgICAgICAgIGlmKChjdHIgPT0gdGRheSkgJiYgKHNob3dUb2RheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sVGV4dCArPSAnPHRkIGNsYXNzPVwiaGlMaXRlXCI+JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbFRleHQgKz0gJzx0ZD4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaHRtbFRleHQgKz0gY3RyICsgJzwvdGQ+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBodG1sVGV4dCArPSAnPC90cj4nO1xyXG4gICAgICAgIC8vIERpc3BsYXkgdGhlIGRheSBvZiB0aGUgbW9udGggZm9yIHRoZSByZXN0IG9mIHRoZSBtb250aFxyXG4gICAgICAgIC8vIERpc3BsYXkgYSBibGFuayBhZnRlciB0aGUgbGFzdCBkYXkgb2YgdGhlIG1vbnRoXHJcbiAgICAgICAgaHRtbFRleHQgKz0gJzx0ciBjbGFzcz1cImNhbERheVJvd1wiPic7XHJcbiAgICAgICAgd2hpbGUgKGN0ciA8PSBsZCkge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwO2kgPCA3OyBpKyspe1xyXG4gICAgICAgICAgICAgICAgY3RyKys7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3RyID4gbGQpe1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWxUZXh0ICs9ICc8dGQ+IDwvdGQ+JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKChjdHIgPT0gdGRheSkgJiYgKHNob3dUb2RheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbFRleHQgKz0gJzx0ZCBjbGFzcz1cImhpTGl0ZVwiPic7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbFRleHQgKz0gJzx0ZD4nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBodG1sVGV4dCArPSBjdHIgKyAnPC90ZD4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGh0bWxUZXh0ICs9ICc8L3RyPjx0ciBjbGFzcz1cImNhbERheVJvd1wiPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGh0bWxUZXh0ICs9ICc8L3RyPjwvdGFibGU+PGJyIGNsYXNzPVwiY2xlYXJcIiAvPjwvZGl2Pic7XHJcbiAgICAgICAgcmV0dXJuIGh0bWxUZXh0O1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgZnVuY3Rpb24gc2hvd0NhbGVuZGVycygpIHtcclxuXHJcbiAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG9kYXkncyBkYXRlXHJcbiAgICAgICAgdmFyIHRoaXNNb250aCA9IHRvZGF5LmdldE1vbnRoKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgbW9udGggLSB6ZXJvLWJhc2VkXHJcbiAgICAgICAgdmFyIHRoaXNZZWFyID0gdG9kYXkuZ2V0WWVhcigpICsgMTkwMDsgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgeWVhclxyXG4gICAgICAgIHZhciBsYXN0TW9udGggPSAodGhpc01vbnRoPT09MD8xMTp0aGlzTW9udGgtMSk7ICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBsYXN0IG1vbnRoXHJcbiAgICAgICAgdmFyIGxhc3RZZWFyID0gKHRoaXNNb250aD09PTA/dGhpc1llYXItMTp0aGlzWWVhcik7ICAgICAgICAgLy8gY2FsY3VsYXRlIGxhc3QgbW9udGgncyB5ZWFyXHJcbiAgICAgICAgdmFyIG5leHRZZWFyID0gKHRoaXNNb250aD09PTExP3RoaXNZZWFyKzE6dGhpc1llYXIpOyAgICAgICAgLy8gbmV4dCBtb250aCdzIHllYXJcclxuICAgICAgICB2YXIgbmV4dE1vbnRoID0gKHRoaXNNb250aD09PTExPzA6dGhpc01vbnRoKzEpOyAgICAgICAgICAgICAvLyBuZXh0IG1vbnRoXHJcblxyXG4gICAgICAgIHZhciBsYXN0TW9uSHRtbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYWxMYXN0TW9uJyk7XHJcbiAgICAgICAgdmFyIHRoaXNNb25IdG1sID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbFRoaXNNb24nKTtcclxuICAgICAgICB2YXIgbmV4dE1vbkh0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FsTmV4dE1vbicpO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgIGlmKCBsYXN0TW9uSHRtbCApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsYXN0TW9uSHRtbC5pbm5lckhUTUwgPSBnZXRDYWxlbmRhckhUTUwobGFzdE1vbnRoLCBsYXN0WWVhciwgZmFsc2UpOyAgICAvLyBTZW5kIGxhc3QgbW9udGggdG8gc2NyZWVuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKCB0aGlzTW9uSHRtbCApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzTW9uSHRtbC5pbm5lckhUTUwgPSBnZXRDYWxlbmRhckhUTUwodGhpc01vbnRoLCB0aGlzWWVhciwgdHJ1ZSk7ICAgICAvLyBTZW5kIHRoaXMgbW9udGggdG8gc2NyZWVuXHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYoIG5leHRNb25IdG1sIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5leHRNb25IdG1sLmlubmVySFRNTCA9IGdldENhbGVuZGFySFRNTChuZXh0TW9udGgsIG5leHRZZWFyLCBmYWxzZSk7ICAgIC8vIFNlbmQgbmV4dCBtb250aCB0byBzY3JlZW5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gR2F0aGVyIFNjcmVlbiBTaXplIEluZm9ybWF0aW9uXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICBmdW5jdGlvbiBnZWJJRChpZCl7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTsgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGdlYlROKHRhZ05hbWUpe1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gc2V0U3R5bGVUb1RhZ3ModGFnTmFtZSwgc3R5bGVTdHJpbmcpe1xyXG4gICAgICAgIHZhciB0YWdzID0gZ2ViVE4odGFnTmFtZSk7XHJcbiAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGk8dGFncy5sZW5ndGg7IGkrKyApXHJcbiAgICAgICAgICAgIHRhZ3NbaV0uc2V0QXR0cmlidXRlKCdzdHlsZScsIHN0eWxlU3RyaW5nKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gdGVzdFNpemVzKHBhcmVudE9iail7XHJcbiAgICAgICAgaWYoIHBhcmVudE9iaiA9PT0gbnVsbCl7IHBhcmVudE9iaiA9ICdib2R5JzsgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGdlYklEKCAnc2NyZWVuLldpZHRoJyApLmlubmVySFRNTCA9IHNjcmVlbi53aWR0aC50b1N0cmluZygpO1xyXG4gICAgICAgIGdlYklEKCAnc2NyZWVuLkhlaWdodCcgKS5pbm5lckhUTUwgPSBzY3JlZW4uaGVpZ2h0LnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgIGdlYklEKCAnd2luZG93LldpZHRoJyApLmlubmVySFRNTCA9IHdpbmRvdy5pbm5lcldpZHRoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgZ2ViSUQoICd3aW5kb3cuSGVpZ2h0JyApLmlubmVySFRNTCA9IHdpbmRvdy5pbm5lckhlaWdodC50b1N0cmluZygpO1xyXG5cclxuICAgICAgICBnZWJJRCggJ2RvY3VtZW50RWxlbWVudC5XaWR0aCcgKS5pbm5lckhUTUwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgudG9TdHJpbmcoKTtcclxuICAgICAgICBnZWJJRCggJ2RvY3VtZW50RWxlbWVudC5IZWlnaHQnICkuaW5uZXJIVE1MID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodC50b1N0cmluZygpO1xyXG5cclxuICAgICAgICBnZWJJRCggJ2JvZHkuV2lkdGgnICkuaW5uZXJIVE1MID0gZ2ViVE4ocGFyZW50T2JqKVswXS5jbGllbnRXaWR0aC50b1N0cmluZygpO1xyXG4gICAgICAgIGdlYklEKCAnYm9keS5IZWlnaHQnICkuaW5uZXJIVE1MID0gZ2ViVE4ocGFyZW50T2JqKVswXS5jbGllbnRIZWlnaHQudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXNwbGF5U2l6ZXMocGFyZW50T2JqKSB7XHJcbiAgICAgICAgaWYoIHBhcmVudE9iaiA9PT0gbnVsbCl7IHBhcmVudE9iaiA9ICdib2R5JzsgfVxyXG4gICAgICAgIHZhciB0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XHJcbiAgICAgICAgdGFibGUuaW5uZXJIVE1MID0gJzx0cj48dGg+U09VUkNFPC90aD48dGg+V0lEVEg8L3RoPjx0aD54PC90aD48dGg+SEVJR0hUPC90aD48L3RyPicgK1xyXG4gICAgICAgICc8dHI+PHRkPnNjcmVlbjwvdGQ+PHRkIGlkPVxcJ3NjcmVlbi5XaWR0aFxcJyAvPjx0ZD54PC90ZD48dGQgaWQ9XFwnc2NyZWVuLkhlaWdodFxcJyAvPjwvdHI+JyArXHJcbiAgICAgICAgJzx0cj48dGQ+d2luZG93PC90ZD48dGQgaWQ9XFwnd2luZG93LldpZHRoXFwnIC8+PHRkPng8L3RkPjx0ZCBpZD1cXCd3aW5kb3cuSGVpZ2h0XFwnIC8+PC90cj4nICtcclxuICAgICAgICAnPHRyPjx0ZD5kb2N1bWVudDxicj4uZG9jdW1lbnRFbGVtZW50PC90ZD48dGQgaWQ9XFwnZG9jdW1lbnRFbGVtZW50LldpZHRoXFwnIC8+PHRkPng8L3RkPicrXHJcbiAgICAgICAgJzx0ZCBpZD1cXCdkb2N1bWVudEVsZW1lbnQuSGVpZ2h0XFwnIC8+PC90cj4nICtcclxuICAgICAgICAnPHRyPjx0ZD5kb2N1bWVudC5ib2R5PC90ZD48dGQgaWQ9XFwnYm9keS5XaWR0aFxcJyAvPjx0ZD54PC90ZD48dGQgaWQ9XFwnYm9keS5IZWlnaHRcXCcgLz48L3RyPic7XHJcblxyXG4gICAgICAgIGdlYlROKHBhcmVudE9iailbMF0uYXBwZW5kQ2hpbGQoIHRhYmxlICk7XHJcblxyXG4gICAgICAgIHNldFN0eWxlVG9UYWdzKCd0YWJsZScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcjogMnB4IHNvbGlkIGJsYWNrICFpbXBvcnRhbnQ7IHBvc2l0aW9uOiBmaXhlZCAhaW1wb3J0YW50OycgK1xyXG4gICAgICAgICAgICAgICAgICAgICdsZWZ0OiAxMDBweCAhaW1wb3J0YW50OyB0b3A6IDkwcHggIWltcG9ydGFudDsgcGFkZGluZzo1cHggIWltcG9ydGFudDsnICtcclxuICAgICAgICAgICAgICAgICAgICAnd2lkdGg6IDIwMHB4ICFpbXBvcnRhbnQ7IGZvbnQtc2l6ZToxMHB4OyAhaW1wb3J0YW50JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ3doaXRlLXNwYWNlOiBwcmUgIWltcG9ydGFudDsgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSAhaW1wb3J0YW50OycgK1xyXG4gICAgICAgICAgICAgICAgICAgICd6LWluZGV4OiA5OTk5ICFpbXBvcnRhbnQ7YmFja2dyb3VuZDogd2hpdGUgIWltcG9ydGFudDsnXHJcbiAgICAgICAgKTtcclxuICAgICAgICBzZXRTdHlsZVRvVGFncygndGQnLCAnY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7IGJvcmRlcjogbm9uZSAhaW1wb3J0YW50OyBwYWRkaW5nOiA1cHggIWltcG9ydGFudDsgdGV4dC1hbGlnbjpjZW50ZXIgIWltcG9ydGFudDsnKTtcclxuICAgICAgICBzZXRTdHlsZVRvVGFncygndGgnLCAnY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7IGJvcmRlcjogbm9uZSAhaW1wb3J0YW50OyBwYWRkaW5nOiA1cHggIWltcG9ydGFudDsgdGV4dC1hbGlnbjpjZW50ZXIgIWltcG9ydGFudDsnKTtcclxuXHJcbiAgICAgICAgdGFibGUuc3R5bGUuc2V0UHJvcGVydHkoICdtYXJnaW4tbGVmdCcsICctJysoIHRhYmxlLmNsaWVudFdpZHRoIC8gMiApKydweCcgKTtcclxuXHJcbiAgICAgICAgc2V0SW50ZXJ2YWwoIHRlc3RTaXplcywgMjAwICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc29ydEJ5S2V5KGFycmF5LCBrZXkpIHtcclxuICAgICAgICByZXR1cm4gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgIHZhciB4ID0gYVtrZXldOyB2YXIgeSA9IGJba2V5XTtcclxuICAgICAgICAgICAgcmV0dXJuICgoeCA8IHkpID8gLTEgOiAoKHggPiB5KSA/IDEgOiAwKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbXVsdE9iakFycmF5MkFycmF5KG11bHRPYmpBcnJheSl7XHJcbiAgICAgICAgLy9jb25zb2xlLmRlYnVnKCdtdWx0T2JqQXJyYXknKTtcclxuICAgICAgICAvL2NvbnNvbGUuZGVidWcobXVsdE9iakFycmF5KTtcclxuICAgICAgICB2YXIgYWxsQXJyYXkgPSBbXTtcclxuICAgICAgICBmb3IodmFyIGk9MDsgaTxtdWx0T2JqQXJyYXkubGVuZ3RoOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IodmFyIGo9MDsgajxtdWx0T2JqQXJyYXlbaV0ubGVuZ3RoO2orKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYWxsQXJyYXkucHVzaCggbXVsdE9iakFycmF5W2ldW2pdICk7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoJ1xcdEFkZGluZyAnICsgbXVsdE9iakFycmF5W2ldW2pdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWxsQXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gSlNPTkRhdGVUb0RhdGVPYmogKGpkKSB7IC8vIGpkID0gSlNPTiBEYXRlIGZvcm1hdCBpZS4gJzIwMTMtMDMtMDhUMTQ6MzQ6MDA6MDAwWidcclxuICAgICAgICBpZiggKGpkLmxlbmd0aCAhPSAyNCkgfHwgIChqZC5zdWJzdHIoNCwxKSAhPSAnLScpIHx8ICAoamQuc3Vic3RyKDcsMSkgIT0gJy0nKSB8fCAgKGpkLnN1YnN0cigxMCwxKSAhPSAnVCcpIHx8ICAoamQuc3Vic3RyKDEzLDEpICE9ICc6JykgfHwgIChqZC5zdWJzdHIoMTYsMSkgIT0gJzonKSB8fCAgKGpkLnN1YnN0cigxOSwxKSAhPSAnOicpIHx8ICAoamQuc3Vic3RyKDIzLDEpICE9ICdaJykgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgZC5zZXRGdWxsWWVhcihqZC5zdWJzdHIoMCw0KSwgamQuc3Vic3RyKDUsMiktMSwgamQuc3Vic3RyKDgsMikpO1xyXG4gICAgICAgIGQuc2V0SG91cnMoamQuc3Vic3RyKDExLDIpKTtcclxuICAgICAgICBkLnNldE1pbnV0ZXMoamQuc3Vic3RyKDE0LDIpKTtcclxuICAgICAgICBkLnNldFNlY29uZHMoamQuc3Vic3RyKDE3LDIpKTtcclxuICAgICAgICBkLnNldE1pbGxpc2Vjb25kcyhqZC5zdWJzdHIoMjAsMykpO1xyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVkaXRJbWFnZURhdGEoaW1nSUQpIHtcclxuICAgICAgICBhbGVydCgnSVxcJ20gc29ycnksIHlvdSBkb25cXCd0IGhhdmUgdGhlIGF1dGhvcml0eSB0byBlZGl0IGltYWdlIElEIycgKyBpbWdJRCArICcuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGVsZXRlSW1hZ2UoaW1nSUQpe1xyXG4gICAgICAgIGFsZXJ0KCdJXFwnbSBzb3JyeSwgeW91IGRvblxcJ3QgaGF2ZSB0aGUgYXV0aG9yaXR5IHRvIGRlbGV0ZSBpbWFnZSBJRCMnICsgaW1nSUQgKyAnLicpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVubGFyZ2VUb2dnbGUoaW1nSUQpe1xyXG4gICAgICAgIGFsZXJ0KCdFbmxhcmdlIGltYWdlIElEIycgKyBpbWdJRCArICcuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzaXplUGFnZSgpIHtcclxuICAgICAgICAkKCBkb2N1bWVudCApLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyggJ3Jlc2l6ZVBhZ2U6IHJlc2l6ZSBzY3JlZW4gb24gbG9hZCEnICk7XHJcbiAgICAgICAgICAgIHZhciBuZXdIZWlnaHQgPSB3aW5kb3cuaGVpZ2h0IC0gMTAwO1xyXG4gICAgICAgICAgICAkKCAnI3Bob3RvQ2Fyb3VzZWwnICkuY3NzKCAnaGVpZ2h0JywgbmV3SGVpZ2h0ICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdGltZWRMb29wKGksIHNlY3MpIHsgICAgICAgICAgXHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7ICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aW1lZExvb3AoJyArIGkgKyAnLCAnICsgc2VjcyAgKyAnKScpOyAgICAgICAgIC8vICB5b3VyIGNvZGUgaGVyZSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKC0taSkgdGltZWRMb29wKGksIHNlY3MpOyAgICAgLy8gIGRlY3JlbWVudCBpIGFuZCBjYWxsIG15TG9vcCBhZ2FpbiBpZiBpID4gMFxyXG4gICAgICAgIH0sIHNlY3MgKiAxMDAwKTtcclxuICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIHBhc3MgdGhlIG51bWJlciBvZiBpdGVyYXRpb25zIGFzIGFuIGFyZ3VtZW50XHJcblxyXG4gICAgaWYoZGVidWcpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdtaXNjLmpzIGZ1bmN0aW9ucyBkZWZpbmVkJyk7XHJcbiAgICB9XHJcblxyXG4vL30oKSk7XHJcblxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKiBFTkQgT0YgRklMRSAtIG1pc2MuanNcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKipcclxuICoqIEZpbGVuYW1lICAgIDogYWJvdXQuY29udHJvbGxlci5qc1xyXG4gKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgYWJvdXRDb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGRlYnVnKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Fib3V0Q29udHJvbGxlciBhY3RpdmF0ZWQnKTtcclxuICAgICAgICB9ICAgIFxyXG5cclxuICAgICAgICAkc2NvcGUuaXRlbXMgPSBbXHJcbiAgICAgICAgICAgICdhYm91dCcsXHJcbiAgICAgICAgICAgICd3ZWJzaXRlJ1xyXG4gICAgICAgIF07XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignYWJvdXRDb250cm9sbGVyJywgW1xyXG4gICAgICAgICAgICAnJHNjb3BlJywgXHJcbiAgICAgICAgICAgIGFib3V0Q29udHJvbGxlclxyXG4gICAgICAgIF0pO1xyXG5cclxuICAgIGlmKGRlYnVnKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnYWJvdXRDb250cm9sbGVyIGRlZmluZWQnKTtcclxuICAgIH1cclxuXHJcbn0oKSk7XHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqIEVORCBPRiBGSUxFIC0gYWJvdXQuY29udHJvbGxlci5qc1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKlxyXG4gKiogRmlsZW5hbWUgICAgOiBob21lLmNvbnRyb2xsZXIuanNcclxuICoqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2hvbWVDb250cm9sbGVyJywgW1xyXG4gICAgICAgICAgICAgICAgJyRyb290U2NvcGUnLCBcclxuICAgICAgICBmdW5jdGlvbigkcm9vdFNjb3BlKXtcclxuXHJcbiAgICAgICAgICAgIHZhciB2bSA9ICRyb290U2NvcGU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihkZWJ1Zyl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaG9tZUNvbnRyb2xsZXIgYWN0aXZhdGVkJyk7XHJcbiAgICAgICAgICAgIH0gICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBUZW1wb3JhcnkgdmFsdWVzIFxyXG4gICAgICAgICAgICAvLyBUT0RPOiByZXBsYWNlIHRoZXNlIHdpdGggcmVhbCBsb2dpbiB2YWx1ZXM7XHJcbiAgICAgICAgICAgIHZtLmxvZ2dlZEluID0gdHJ1ZTtcclxuICAgICAgICAgICAgdm0udXNlck5hbWUgPSAnYmlsbEBtYWludHouY29tJztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHNob3dDYWxlbmRlcnMoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZtO1xyXG4gICAgICAgIH1cclxuICAgIF0pO1xyXG5cclxuICAgIGlmKGRlYnVnKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnaG9tZUNvbnRyb2xsZXIgZGVmaW5lZCcpO1xyXG4gICAgfVxyXG5cclxufSgpKTtcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiogRU5EIE9GIEZJTEUgLSBob21lLmNvbnRyb2xsZXIuanNcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKipcclxuICoqIEZpbGVuYW1lICAgIDogY2xpZW50LmNvbnRyb2xsZXIuanNcclxuICoqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLy8gY2xpZW50Q29udHJvbGxlciBGdW5jdGlvblxyXG4gICAgdmFyIGNsaWVudENvbnRyb2xsZXIgPSBmdW5jdGlvbigkc2NvcGUsIGNsaWVudFNlcnZpY2Upe1xyXG5cclxuICAgICAgICBpZihkZWJ1Zyl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjbGllbnRDb250cm9sbGVyIGFjdGl2YXRlZCcpO1xyXG4gICAgICAgIH0gICAgXHJcblxyXG4gICAgICAgIHZhciB2bSA9ICRzY29wZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIGNsaWVudHMgY29sbGVjdGlvblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICB2bS5pbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0uY2xpZW50cyA9IFtdO1xyXG4gICAgICAgICAgICB2bS5jbGllbnRDYXRzID0gW107XHJcbiAgICAgICAgICAgIHZtLnNvcnRPcmRlciA9ICdpZCc7XHJcbiAgICAgICAgICAgIHZtLmNsaWVudHMgPSB2bS5nZXRBbGxWKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gR0VUIEFsbCBjbGllbnRzXHJcbiAgICAgICAgdm0uZ2V0QWxsViA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGNsaWVudFNlcnZpY2Uuc3J2Y0dldEFsbGNsaWVudHMoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICAvLyBzdWNjZXNzXHJcbiAgICAgICAgICAgICAgICB2bS5jbGllbnRzID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTnVtYmVyIG9mIGNsaWVudHMgcmV0dXJuZWQgPSBbJyArIHZtLmNsaWVudHMubGVuZ3RoICsgJ10nKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgICAgIC8vIGVycm9yXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1I6JyArIGVycik7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKG1zZyl7XHJcbiAgICAgICAgICAgICAgICAvLyBtZXNzYWdlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcclxuICAgICAgICAgICAgICAgIHZtLmNsaWVudENhdHMgPSBfLnVuaXEoXy5wbHVjayh2bS5jbGllbnRzLCAnY2F0ZWdvcnknKSk7XHJcbiAgICAgICAgICAgICAgICAvL3ZtLmNsaWVudENhdHMgPSBjbGllbnRTZXJ2aWNlLmdldGNsaWVudENhdHMoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmKGRlYnVnICYmICh2bS5jbGllbnRzLmxlbmd0aCAhPSAwKSApe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NsaWVudENvbnRyb2xsZXIgY2xpZW50cygnICsgdm0uY2xpZW50cy5sZW5ndGggKyAnKScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uaW5pdCgpO1xyXG5cclxuICAgICAgICB2bS5hZGRjbGllbnQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9wYXJ0aWFscy9jbGllbnQvYWRkY2xpZW50Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2NsaWVudENvbnRyb2xsZXInXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgLy8gc3VjY2Vzc1xyXG4gICAgICAgICAgICAgICAgdm0uZ2V0QWxsVigpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgICAgICAgICAgLy8gZXJyb3JcclxuICAgICAgICAgICAgICAgIHZtLmdldEFsbFYoKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24obXNnKXtcclxuICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZtLm1vZGlmeURhdGEgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5lZGl0Y2xpZW50ID0gZnVuY3Rpb24oY2xpZW50KXtcclxuICAgICAgICAgICAgdm0ubW9kaWZ5RGF0YSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmKGNvbmZpcm0oJ0RvIHlvdSB3YW50IHRvIHNhdmUgdGhlIGNoYW5nZXM/Jykpe1xyXG4gICAgICAgICAgICAgICAgY2xpZW50U2VydmljZS5zcnZjRWRpdGNsaWVudChjbGllbnQpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3VjY2Vzc1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmdldEFsbFYoKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3JcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1I6JyArIGVycik7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihtc2cpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLm1vZGlmeURhdGEgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5kZWxjbGllbnQgPSBmdW5jdGlvbihpZCl7XHJcbiAgICAgICAgICAgIHZtLm1vZGlmeURhdGEgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZihjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gREVMRVRFIHRoaXMgY2xpZW50PycpKXtcclxuICAgICAgICAgICAgICAgIGlmKGNsaWVudFNlcnZpY2Uuc3J2Y0RlbGNsaWVudChpZCkgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NsaWVudCBJZCBbJyArIGlkICsgJ10gaGFzIGJlZW4gZGVsZXRlZCEnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SOiBjbGllbnQgSWQgWycgKyBpZCArICddIGhhcyBOT1QgYmVlbiBkZWxldGVkIScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLm1vZGlmeURhdGEgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5tb2RpZnlEYXRhID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyB1aS1ncmlkIG9wdGlvbnNcclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIHZtLmdyaWRPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBlbmFibGVDb2x1bW5SZXNpemluZzogdHJ1ZSxcclxuICAgICAgICAgICAgZW5hYmxlU29ydGluZzogdHJ1ZSxcclxuICAgICAgICAgICAgcm93SGVpZ2h0OjEwMCxcclxuICAgICAgICAgICAgY29sdW1uRGVmczogW1xyXG4gICAgICAgICAgICAgICAge2ZpZWxkOiAnaW1nJywgY2VsbFRlbXBsYXRlOic8aW1nIHdpZHRoPVxcJzEyMHB4XFwnIG5nLXNyYz1cXCd7e2dyaWQuZ2V0Q2VsbFZhbHVlKHJvdywgY29sKX19XFwnIGxhenktc3JjPicgfSxcclxuICAgICAgICAgICAgICAgIHtmaWVsZDogJ25hbWUnLCBkaXNwbGF5TmFtZTogJ05hbWUnfSxcclxuICAgICAgICAgICAgICAgIHtmaWVsZDogJ2NhdGVnb3J5JywgZGlzcGxheU5hbWU6ICdDYXRlZ29yeSd9LFxyXG4gICAgICAgICAgICAgICAge25hbWU6ICdlZGl0JywgZGlzcGxheU5hbWU6ICdFZGl0JywgXHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAnPGJ1dHRvbiBpZD1cImVkaXRCdG5cIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tc21hbGxcIiBuZy1jbGljaz1cImVkaXQocm93LmVudGl0eSlcIiA+RWRpdDwvYnV0dG9uPiAnfVxyXG4gICAgICAgICAgIF0gICAgXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ucm93Q29sb3IgPSBbJ2N5YW4nLCAnY3JlYW0nXTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJyBjbGllbnRzID0gJywgdm0uY2xpZW50cyk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJyNjbGllbnRzID0gJywgdm0uY2xpZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCcgY2xpZW50Q2F0cyA9ICcsIHZtLmNsaWVudENhdHMpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdcXG51aS1ncmlkLk9wdGlvbnMgPSAnLCB2bS5ncmlkT3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHJldHVybiB2bTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gY2xpZW50Q29udHJvbGxlciBEZWZpbml0b25cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdjbGllbnRDb250cm9sbGVyJywgW1xyXG4gICAgICAgICAgICAnJHNjb3BlJywgXHJcbiAgICAgICAgICAgICdjbGllbnRTZXJ2aWNlJyxcclxuICAgICAgICAgICAgY2xpZW50Q29udHJvbGxlcl0pO1xyXG5cclxuICAgIGlmKGRlYnVnKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnY2xpZW50Q29udHJvbGxlciBkZWZpbmVkJyk7XHJcbiAgICB9XHJcblxyXG59KCkpO1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKiBFTkQgT0YgRklMRSAtIGNsaWVudC5jb250cm9sbGVyLmpzXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqXHJcbiAqKiBGaWxlbmFtZSAgICA6IHZvbHVudGVlci5jb250cm9sbGVyLmpzXHJcbiAqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8vIHZvbHVudGVlckNvbnRyb2xsZXIgRnVuY3Rpb25cclxuICAgIHZhciB2b2x1bnRlZXJDb250cm9sbGVyID0gZnVuY3Rpb24oJHNjb3BlLCB2b2x1bnRlZXJTZXJ2aWNlKXtcclxuXHJcbiAgICAgICAgaWYoZGVidWcpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygndm9sdW50ZWVyQ29udHJvbGxlciBhY3RpdmF0ZWQnKTtcclxuICAgICAgICB9ICAgIFxyXG5cclxuICAgICAgICB2YXIgdm0gPSAkc2NvcGU7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyB2b2x1bnRlZXJzIGNvbGxlY3Rpb25cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgdm0uaW5pdCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHZtLnZvbHVudGVlcnMgPSBbXTtcclxuICAgICAgICAgICAgdm0udm9sdW50ZWVyQ2F0cyA9IFtdO1xyXG4gICAgICAgICAgICB2bS5zb3J0T3JkZXIgPSAnaWQnO1xyXG4gICAgICAgICAgICB2bS52b2x1bnRlZXJzID0gdm0uZ2V0QWxsVigpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIEdFVCBBbGwgdm9sdW50ZWVyc1xyXG4gICAgICAgIHZtLmdldEFsbFYgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB2b2x1bnRlZXJTZXJ2aWNlLnNydmNHZXRBbGxWb2x1bnRlZXJzKClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAgICAgICAgICAgICAgLy8gc3VjY2Vzc1xyXG4gICAgICAgICAgICAgICAgdm0udm9sdW50ZWVycyA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ051bWJlciBvZiB2b2x1bnRlZXJzIHJldHVybmVkID0gWycgKyB2bS52b2x1bnRlZXJzLmxlbmd0aCArICddJyk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgICAgICAvLyBlcnJvclxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SOicgKyBlcnIpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihtc2cpe1xyXG4gICAgICAgICAgICAgICAgLy8gbWVzc2FnZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICB2bS52b2x1bnRlZXJDYXRzID0gXy51bmlxKF8ucGx1Y2sodm0udm9sdW50ZWVycywgJ2NhdGVnb3J5JykpO1xyXG4gICAgICAgICAgICAgICAgLy92bS52b2x1bnRlZXJDYXRzID0gdm9sdW50ZWVyU2VydmljZS5nZXR2b2x1bnRlZXJDYXRzKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZihkZWJ1ZyAmJiAodm0udm9sdW50ZWVycy5sZW5ndGggIT0gMCkgKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd2b2x1bnRlZXJDb250cm9sbGVyIHZvbHVudGVlcnMoJyArIHZtLnZvbHVudGVlcnMubGVuZ3RoICsgJyknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmluaXQoKTtcclxuXHJcbiAgICAgICAgdm0uYWRkdm9sdW50ZWVyID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvcGFydGlhbHMvdm9sdW50ZWVyL2FkZHZvbHVudGVlci5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd2b2x1bnRlZXJDb250cm9sbGVyJ1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIC8vIHN1Y2Nlc3NcclxuICAgICAgICAgICAgICAgIHZtLmdldEFsbFYoKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgICAgIC8vIGVycm9yXHJcbiAgICAgICAgICAgICAgICB2bS5nZXRBbGxWKCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKG1zZyl7XHJcbiAgICAgICAgICAgICAgICAvLyBtZXNzYWdlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2bS5tb2RpZnlEYXRhID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZWRpdFZvbHVudGVlciA9IGZ1bmN0aW9uKHZvbHVudGVlcil7XHJcbiAgICAgICAgICAgIHZtLm1vZGlmeURhdGEgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZihjb25maXJtKCdEbyB5b3Ugd2FudCB0byBzYXZlIHRoZSBjaGFuZ2VzPycpKXtcclxuICAgICAgICAgICAgICAgIHZvbHVudGVlclNlcnZpY2Uuc3J2Y0VkaXR2b2x1bnRlZXIodm9sdW50ZWVyKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN1Y2Nlc3NcclxuICAgICAgICAgICAgICAgICAgICB2bS5nZXRBbGxWKCk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SOicgKyBlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24obXNnKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5tb2RpZnlEYXRhID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZGVsVm9sdW50ZWVyID0gZnVuY3Rpb24oaWQpe1xyXG4gICAgICAgICAgICB2bS5tb2RpZnlEYXRhID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYoY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIERFTEVURSB0aGlzIHZvbHVudGVlcj8nKSl7XHJcbiAgICAgICAgICAgICAgICBpZih2b2x1bnRlZXJTZXJ2aWNlLnNydmNEZWx2b2x1bnRlZXIoaWQpID09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd2b2x1bnRlZXIgSWQgWycgKyBpZCArICddIGhhcyBiZWVuIGRlbGV0ZWQhJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjogdm9sdW50ZWVyIElkIFsnICsgaWQgKyAnXSBoYXMgTk9UIGJlZW4gZGVsZXRlZCEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5tb2RpZnlEYXRhID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ubW9kaWZ5RGF0YSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gdWktZ3JpZCBvcHRpb25zXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICB2bS5ncmlkT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgZW5hYmxlQ29sdW1uUmVzaXppbmc6IHRydWUsXHJcbiAgICAgICAgICAgIGVuYWJsZVNvcnRpbmc6IHRydWUsXHJcbiAgICAgICAgICAgIHJvd0hlaWdodDoxMDAsXHJcbiAgICAgICAgICAgIGNvbHVtbkRlZnM6IFtcclxuICAgICAgICAgICAgICAgIHtmaWVsZDogJ2ltZycsIGNlbGxUZW1wbGF0ZTonPGltZyB3aWR0aD1cXCcxMjBweFxcJyBuZy1zcmM9XFwne3tncmlkLmdldENlbGxWYWx1ZShyb3csIGNvbCl9fVxcJyBsYXp5LXNyYz4nIH0sXHJcbiAgICAgICAgICAgICAgICB7ZmllbGQ6ICduYW1lJywgZGlzcGxheU5hbWU6ICdOYW1lJ30sXHJcbiAgICAgICAgICAgICAgICB7ZmllbGQ6ICdjYXRlZ29yeScsIGRpc3BsYXlOYW1lOiAnQ2F0ZWdvcnknfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiAnZWRpdCcsIGRpc3BsYXlOYW1lOiAnRWRpdCcsIFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJzxidXR0b24gaWQ9XCJlZGl0QnRuXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuLXNtYWxsXCIgbmctY2xpY2s9XCJlZGl0KHJvdy5lbnRpdHkpXCIgPkVkaXQ8L2J1dHRvbj4gJ31cclxuICAgICAgICAgICBdICAgIFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnJvd0NvbG9yID0gWydjeWFuJywgJ2NyZWFtJ107XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCcgdm9sdW50ZWVycyA9ICcsIHZtLnZvbHVudGVlcnMpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCcjdm9sdW50ZWVycyA9ICcsIHZtLnZvbHVudGVlcnMubGVuZ3RoKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnIHZvbHVudGVlckNhdHMgPSAnLCB2bS52b2x1bnRlZXJDYXRzKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnXFxudWktZ3JpZC5PcHRpb25zID0gJywgdm0uZ3JpZE9wdGlvbnMpO1xyXG5cclxuICAgICAgICByZXR1cm4gdm07XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHZvbHVudGVlckNvbnRyb2xsZXIgRGVmaW5pdG9uXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcigndm9sdW50ZWVyQ29udHJvbGxlcicsIFtcclxuICAgICAgICAgICAgJyRzY29wZScsIFxyXG4gICAgICAgICAgICAndm9sdW50ZWVyU2VydmljZScsXHJcbiAgICAgICAgICAgIHZvbHVudGVlckNvbnRyb2xsZXJdKTtcclxuXHJcbiAgICBpZihkZWJ1Zyl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3ZvbHVudGVlckNvbnRyb2xsZXIgZGVmaW5lZCcpO1xyXG4gICAgfVxyXG5cclxufSgpKTtcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiogRU5EIE9GIEZJTEUgLSB2b2x1bnRlZXIuY29udHJvbGxlci5qc1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKlxyXG4gKiogRmlsZW5hbWUgICAgOiBmYWNpbGl0eS5jb250cm9sbGVyLmpzXHJcbiAqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8vIGZhY2lsaXR5Q29udHJvbGxlciBGdW5jdGlvblxyXG4gICAgdmFyIGZhY2lsaXR5Q29udHJvbGxlciA9IGZ1bmN0aW9uKCRzY29wZSwgZmFjaWxpdHlTZXJ2aWNlKXtcclxuXHJcbiAgICAgICAgaWYoZGVidWcpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZmFjaWxpdHlDb250cm9sbGVyIGFjdGl2YXRlZCcpO1xyXG4gICAgICAgIH0gICAgXHJcblxyXG4gICAgICAgIHZhciB2bSA9ICRzY29wZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIGZhY2lsaXRpZXMgY29sbGVjdGlvblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICB2bS5pbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0uZmFjaWxpdGllcyA9IFtdO1xyXG4gICAgICAgICAgICB2bS5mYWNpbGl0eUNhdHMgPSBbXTtcclxuICAgICAgICAgICAgdm0uc29ydE9yZGVyID0gJ2lkJztcclxuICAgICAgICAgICAgdm0uZmFjaWxpdGllcyA9IHZtLmdldEFsbFYoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBHRVQgQWxsIGZhY2lsaXRpZXNcclxuICAgICAgICB2bS5nZXRBbGxWID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgZmFjaWxpdHlTZXJ2aWNlLnNydmNHZXRBbGxGYWNpbGl0aWVzKClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAgICAgICAgICAgICAgLy8gc3VjY2Vzc1xyXG4gICAgICAgICAgICAgICAgdm0uZmFjaWxpdGllcyA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ051bWJlciBvZiBmYWNpbGl0aWVzIHJldHVybmVkID0gWycgKyB2bS5mYWNpbGl0aWVzLmxlbmd0aCArICddJyk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgICAgICAvLyBlcnJvclxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SOicgKyBlcnIpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihtc2cpe1xyXG4gICAgICAgICAgICAgICAgLy8gbWVzc2FnZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICB2bS5mYWNpbGl0eUNhdHMgPSBfLnVuaXEoXy5wbHVjayh2bS5mYWNpbGl0aWVzLCAnY2F0ZWdvcnknKSk7XHJcbiAgICAgICAgICAgICAgICAvL3ZtLmZhY2lsaXR5Q2F0cyA9IGZhY2lsaXR5U2VydmljZS5nZXRmYWNpbGl0eUNhdHMoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmKGRlYnVnICYmICh2bS5mYWNpbGl0aWVzLmxlbmd0aCAhPSAwKSApe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZhY2lsaXR5Q29udHJvbGxlciBmYWNpbGl0aWVzKCcgKyB2bS5mYWNpbGl0aWVzLmxlbmd0aCArICcpJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5pbml0KCk7XHJcblxyXG4gICAgICAgIHZtLmFkZEZhY2lsaXR5ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvcGFydGlhbHMvZmFjaWxpdHkvYWRkZmFjaWxpdHkuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnZmFjaWxpdHlDb250cm9sbGVyJ1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIC8vIHN1Y2Nlc3NcclxuICAgICAgICAgICAgICAgIHZtLmdldEFsbFYoKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgICAgIC8vIGVycm9yXHJcbiAgICAgICAgICAgICAgICB2bS5nZXRBbGxWKCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKG1zZyl7XHJcbiAgICAgICAgICAgICAgICAvLyBtZXNzYWdlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2bS5tb2RpZnlEYXRhID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZWRpdEZhY2lsaXR5ID0gZnVuY3Rpb24oZmFjaWxpdHkpe1xyXG4gICAgICAgICAgICB2bS5tb2RpZnlEYXRhID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYoY29uZmlybSgnRG8geW91IHdhbnQgdG8gc2F2ZSB0aGUgY2hhbmdlcz8nKSl7XHJcbiAgICAgICAgICAgICAgICBmYWNpbGl0eVNlcnZpY2Uuc3J2Y0VkaXRGYWNpbGl0eShmYWNpbGl0eSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzdWNjZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZ2V0QWxsVigpO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyBlcnJvclxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjonICsgZXJyKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKG1zZyl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0ubW9kaWZ5RGF0YSA9IGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRlbEZhY2lsaXR5ID0gZnVuY3Rpb24oaWQpe1xyXG4gICAgICAgICAgICB2bS5tb2RpZnlEYXRhID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYoY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIERFTEVURSB0aGlzIGZhY2lsaXR5PycpKXtcclxuICAgICAgICAgICAgICAgIGlmKGZhY2lsaXR5U2VydmljZS5zcnZjRGVsRmFjaWxpdHkoaWQpID09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmYWNpbGl0eSBJZCBbJyArIGlkICsgJ10gaGFzIGJlZW4gZGVsZXRlZCEnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VSUk9SOiBmYWNpbGl0eSBJZCBbJyArIGlkICsgJ10gaGFzIE5PVCBiZWVuIGRlbGV0ZWQhJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0ubW9kaWZ5RGF0YSA9IGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLm1vZGlmeURhdGEgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgIC8vIHVpLWdyaWQgb3B0aW9uc1xyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgdm0uZ3JpZE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGVuYWJsZUNvbHVtblJlc2l6aW5nOiB0cnVlLFxyXG4gICAgICAgICAgICBlbmFibGVTb3J0aW5nOiB0cnVlLFxyXG4gICAgICAgICAgICByb3dIZWlnaHQ6MTAwLFxyXG4gICAgICAgICAgICBjb2x1bW5EZWZzOiBbXHJcbiAgICAgICAgICAgICAgICB7ZmllbGQ6ICdpbWcnLCBjZWxsVGVtcGxhdGU6JzxpbWcgd2lkdGg9XFwnMTIwcHhcXCcgbmctc3JjPVxcJ3t7Z3JpZC5nZXRDZWxsVmFsdWUocm93LCBjb2wpfX1cXCcgbGF6eS1zcmM+JyB9LFxyXG4gICAgICAgICAgICAgICAge2ZpZWxkOiAnbmFtZScsIGRpc3BsYXlOYW1lOiAnTmFtZSd9LFxyXG4gICAgICAgICAgICAgICAge2ZpZWxkOiAnY2F0ZWdvcnknLCBkaXNwbGF5TmFtZTogJ0NhdGVnb3J5J30sXHJcbiAgICAgICAgICAgICAgICB7bmFtZTogJ2VkaXQnLCBkaXNwbGF5TmFtZTogJ0VkaXQnLCBcclxuICAgICAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICc8YnV0dG9uIGlkPVwiZWRpdEJ0blwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0bi1zbWFsbFwiIG5nLWNsaWNrPVwiZWRpdChyb3cuZW50aXR5KVwiID5FZGl0PC9idXR0b24+ICd9XHJcbiAgICAgICAgICAgXSAgICBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5yb3dDb2xvciA9IFsnY3lhbicsICdjcmVhbSddO1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnIGZhY2lsaXRpZXMgPSAnLCB2bS5mYWNpbGl0aWVzKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnI2ZhY2lsaXRpZXMgPSAnLCB2bS5mYWNpbGl0aWVzLmxlbmd0aCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJyBmYWNpbGl0eUNhdHMgPSAnLCB2bS5mYWNpbGl0eUNhdHMpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdcXG51aS1ncmlkLk9wdGlvbnMgPSAnLCB2bS5ncmlkT3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHJldHVybiB2bTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gZmFjaWxpdHlDb250cm9sbGVyIERlZmluaXRvblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2ZhY2lsaXR5Q29udHJvbGxlcicsIFtcclxuICAgICAgICAgICAgJyRzY29wZScsIFxyXG4gICAgICAgICAgICAnZmFjaWxpdHlTZXJ2aWNlJyxcclxuICAgICAgICAgICAgZmFjaWxpdHlDb250cm9sbGVyXSk7XHJcblxyXG4gICAgaWYoZGVidWcpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmYWNpbGl0eUNvbnRyb2xsZXIgZGVmaW5lZCcpO1xyXG4gICAgfVxyXG5cclxufSgpKTtcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiogRU5EIE9GIEZJTEUgLSBmYWNpbGl0eS5jb250cm9sbGVyLmpzXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqXHJcbiAqKiBGaWxlbmFtZSAgICA6IHNhbXBsZS5jb250cm9sbGVyLmpzXHJcbiAqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8vIHNhbXBsZUNvbnRyb2xsZXIgRnVuY3Rpb25cclxuICAgIHZhciBzYW1wbGVDb250cm9sbGVyID0gZnVuY3Rpb24oJHNjb3BlLCBzYW1wbGVTZXJ2aWNlKXtcclxuXHJcbiAgICAgICAgaWYoZGVidWcpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2FtcGxlQ29udHJvbGxlciBhY3RpdmF0ZWQnKTtcclxuICAgICAgICB9ICAgIFxyXG5cclxuICAgICAgICB2YXIgdm0gPSAkc2NvcGU7XHJcblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAvLyBzYW1wbGUgY29sbGVjdGlvblxyXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICB2bS5pbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdm0uc2FtcGxlcyA9IFtdO1xyXG4gICAgICAgICAgICB2bS5zYW1wbGVDYXRzID0gW107XHJcbiAgICAgICAgICAgIHZtLnNvcnRPcmRlciA9ICdpZCc7XHJcbiAgICAgICAgICAgIHZtLnNhbXBsZXMgPSB2bS5nZXRBbGxWKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gR0VUIEFsbCBzYW1wbGVzXHJcbiAgICAgICAgdm0uZ2V0QWxsViA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNhbXBsZVNlcnZpY2Uuc3J2Y0dldEFsbFNhbXBsZXMoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICAvLyBzdWNjZXNzXHJcbiAgICAgICAgICAgICAgICB2bS5zYW1wbGVzID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTnVtYmVyIG9mIHNhbXBsZXMgcmV0dXJuZWQgPSBbJyArIHZtLnNhbXBsZXMubGVuZ3RoICsgJ10nKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKXtcclxuICAgICAgICAgICAgICAgIC8vIGVycm9yXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1I6JyArIGVycik7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKG1zZyl7XHJcbiAgICAgICAgICAgICAgICAvLyBtZXNzYWdlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcclxuICAgICAgICAgICAgICAgIHZtLnNhbXBsZUNhdHMgPSBfLnVuaXEoXy5wbHVjayh2bS5zYW1wbGVzLCAnY2F0ZWdvcnknKSk7XHJcbiAgICAgICAgICAgICAgICAvL3ZtLnNhbXBsZUNhdHMgPSBzYW1wbGVTZXJ2aWNlLmdldFNhbXBsZUNhdHMoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmKGRlYnVnICYmICh2bS5zYW1wbGVzLmxlbmd0aCAhPSAwKSApe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NhbXBsZUNvbnRyb2xsZXIgc2FtcGxlcygnICsgdm0uc2FtcGxlcy5sZW5ndGggKyAnKScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uaW5pdCgpO1xyXG5cclxuICAgICAgICB2bS5hZGRTYW1wbGUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9wYXJ0aWFscy9zYW1wbGUvYWRkc2FtcGxlLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NhbXBsZUNvbnRyb2xsZXInXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgLy8gc3VjY2Vzc1xyXG4gICAgICAgICAgICAgICAgdm0uZ2V0QWxsVigpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpe1xyXG4gICAgICAgICAgICAgICAgLy8gZXJyb3JcclxuICAgICAgICAgICAgICAgIHZtLmdldEFsbFYoKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24obXNnKXtcclxuICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZtLm1vZGlmeURhdGEgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5lZGl0U2FtcGxlID0gZnVuY3Rpb24oc2FtcGxlKXtcclxuICAgICAgICAgICAgdm0ubW9kaWZ5RGF0YSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmKGNvbmZpcm0oJ0RvIHlvdSB3YW50IHRvIHNhdmUgdGhlIGNoYW5nZXM/Jykpe1xyXG4gICAgICAgICAgICAgICAgc2FtcGxlU2VydmljZS5zcnZjRWRpdFNhbXBsZShzYW1wbGUpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3VjY2Vzc1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmdldEFsbFYoKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycil7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3JcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRVJST1I6JyArIGVycik7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihtc2cpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZtLm1vZGlmeURhdGEgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5kZWxTYW1wbGUgPSBmdW5jdGlvbihpZCl7XHJcbiAgICAgICAgICAgIHZtLm1vZGlmeURhdGEgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZihjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gREVMRVRFIHRoaXMgc2FtcGxlcz8nKSl7XHJcbiAgICAgICAgICAgICAgICBpZihzYW1wbGVTZXJ2aWNlLnNydmNEZWxTYW1wbGUoaWQpID09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzYW1wbGUgSWQgWycgKyBpZCArICddIGhhcyBiZWVuIGRlbGV0ZWQhJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjogc2FtcGxlIElkIFsnICsgaWQgKyAnXSBoYXMgTk9UIGJlZW4gZGVsZXRlZCEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2bS5tb2RpZnlEYXRhID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ubW9kaWZ5RGF0YSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgLy8gdWktZ3JpZCBvcHRpb25zXHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICB2bS5ncmlkT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgZW5hYmxlQ29sdW1uUmVzaXppbmc6IHRydWUsXHJcbiAgICAgICAgICAgIGVuYWJsZVNvcnRpbmc6IHRydWUsXHJcbiAgICAgICAgICAgIHJvd0hlaWdodDoxMDAsXHJcbiAgICAgICAgICAgIGNvbHVtbkRlZnM6IFtcclxuICAgICAgICAgICAgICAgIHtmaWVsZDogJ2ltZycsIGNlbGxUZW1wbGF0ZTonPGltZyB3aWR0aD1cXCcxMjBweFxcJyBuZy1zcmM9XFwne3tncmlkLmdldENlbGxWYWx1ZShyb3csIGNvbCl9fVxcJyBsYXp5LXNyYz4nIH0sXHJcbiAgICAgICAgICAgICAgICB7ZmllbGQ6ICduYW1lJywgZGlzcGxheU5hbWU6ICdOYW1lJ30sXHJcbiAgICAgICAgICAgICAgICB7ZmllbGQ6ICdjYXRlZ29yeScsIGRpc3BsYXlOYW1lOiAnQ2F0ZWdvcnknfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOiAnZWRpdCcsIGRpc3BsYXlOYW1lOiAnRWRpdCcsIFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJzxidXR0b24gaWQ9XCJlZGl0QnRuXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuLXNtYWxsXCIgbmctY2xpY2s9XCJlZGl0KHJvdy5lbnRpdHkpXCIgPkVkaXQ8L2J1dHRvbj4gJ31cclxuICAgICAgICAgICBdICAgIFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnJvd0NvbG9yID0gWydjeWFuJywgJ2NyZWFtJ107XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCcgc2FtcGxlcyA9ICcsIHZtLnNhbXBsZXMpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCcjc2FtcGxlcyA9ICcsIHZtLnNhbXBsZXMubGVuZ3RoKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnIHNhbXBsZUNhdHMgPSAnLCB2bS5zYW1wbGVDYXRzKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnXFxudWktZ3JpZC5PcHRpb25zID0gJywgdm0uZ3JpZE9wdGlvbnMpO1xyXG5cclxuICAgICAgICByZXR1cm4gdm07XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHNhbXBsZUNvbnRyb2xsZXIgRGVmaW5pdG9uXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignc2FtcGxlQ29udHJvbGxlcicsIFtcclxuICAgICAgICAgICAgJyRzY29wZScsIFxyXG4gICAgICAgICAgICAnc2FtcGxlU2VydmljZScsXHJcbiAgICAgICAgICAgIHNhbXBsZUNvbnRyb2xsZXJdKTtcclxuXHJcbiAgICBpZihkZWJ1Zyl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3NhbXBsZUNvbnRyb2xsZXIgZGVmaW5lZCcpO1xyXG4gICAgfVxyXG5cclxufSgpKTtcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiogRU5EIE9GIEZJTEUgLSBzYW1wbGUuY29udHJvbGxlci5qc1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKlxyXG4gKiogRmlsZW5hbWUgICAgOiB1c2VyLmNvbnRyb2xsZXIuanNcclxuICoqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIHVzZXJDb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGRlYnVnKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3VzZXJDb250cm9sbGVyIGFjdGl2YXRlZCcpO1xyXG4gICAgICAgIH0gICAgXHJcblxyXG4gICAgICAgICRzY29wZS5pdGVtcyA9IFtcclxuICAgICAgICAgICAgJ3VzZXInLFxyXG4gICAgICAgICAgICAnd2Vic2l0ZSdcclxuICAgICAgICBdO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3VzZXJDb250cm9sbGVyJywgW1xyXG4gICAgICAgICAgICAnJHNjb3BlJywgXHJcbiAgICAgICAgICAgIHVzZXJDb250cm9sbGVyXHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgaWYoZGVidWcpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCd1c2VyQ29udHJvbGxlciBkZWZpbmVkJyk7XHJcbiAgICB9XHJcblxyXG59KCkpO1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKiBFTkQgT0YgRklMRSAtIHVzZXIuY29udHJvbGxlci5qc1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKlxyXG4gKiogRmlsZW5hbWUgICAgOiBkaXJlY3RpdmVzLmpzXHJcbiAqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vLyBEZWZpbmUgeW91ciBkaXJlY3RpdmVzIGhlcmUuIFxyXG4vLyBEaXJlY3RpdmVzIGNhbiBiZSBhZGRlZCB0byBzYW1lIG1vZHVsZSBhcyB0aGUgbWFpbiAnYXBwJyBcclxuLy8gb3IgYSBzZXBlcmF0ZSBtb2R1bGUgY2FuIGJlIGNyZWF0ZWQuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSB1aS5ib290c3RyYXAuY2Fyb3VzZWwuZGlyZWN0aXZlOnNsaWRlXHJcbiAqIEByZXN0cmljdCBFQVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ3JlYXRlcyBhIHNsaWRlIGluc2lkZSBhIHtAbGluayB1aS5ib290c3RyYXAuY2Fyb3VzZWwuZGlyZWN0aXZlOmNhcm91c2VsIGNhcm91c2VsfS4gIE11c3QgYmUgcGxhY2VkIGFzIGEgY2hpbGQgb2YgYSBjYXJvdXNlbCBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBhY3RpdmUgTW9kZWwgYmluZGluZywgd2hldGhlciBvciBub3QgdGhpcyBzbGlkZSBpcyBjdXJyZW50bHkgYWN0aXZlLlxyXG4gKiBAcGFyYW0ge251bWJlcj19IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgc2xpZGUuIFRoZSBzbGlkZXMgd2lsbCBiZSBzb3J0ZWQgYnkgdGhpcyBwYXJhbWV0ZXIuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbjxleGFtcGxlIG1vZHVsZT1cInVpLmJvb3RzdHJhcFwiPlxyXG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cclxuICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDYXJvdXNlbERlbW9DdHJsXCI+XHJcbiAgICAgICAgICAgIDxjYXJvdXNlbD5cclxuICAgICAgICAgICAgICAgIDxzbGlkZSBuZy1yZXBlYXQ9XCJzbGlkZSBpbiBzbGlkZXNcIiBhY3RpdmU9XCJzbGlkZS5hY3RpdmVcIiBpbmRleD1cIiRpbmRleFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgbmctc3JjPVwie3tzbGlkZS5pbWFnZX19XCIgc3R5bGU9XCJtYXJnaW46YXV0bztcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2Fyb3VzZWwtY2FwdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDQ+U2xpZGUge3skaW5kZXh9fTwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt7c2xpZGUudGV4dH19PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9zbGlkZT5cclxuICAgICAgICAgICAgPC9jYXJvdXNlbD5cclxuICAgICAgICAgICAgSW50ZXJ2YWwsIGluIG1pbGxpc2Vjb25kczogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cIm15SW50ZXJ2YWxcIj5cclxuICAgICAgICAgICAgPGJyIC8+RW50ZXIgYSBuZWdhdGl2ZSBudW1iZXIgdG8gc3RvcCB0aGUgaW50ZXJ2YWwuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XHJcbiAgICAgICAgZnVuY3Rpb24gQ2Fyb3VzZWxEZW1vQ3RybCgpIHtcclxuICAgICAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICAgICAgdm0ubXlJbnRlcnZhbCA9IDUwMDA7XHJcbiAgICAgICAgfVxyXG4gICAgPC9maWxlPlxyXG4gICAgPGZpbGUgbmFtZT1cImRlbW8uY3NzXCI+XHJcbiAgICAgICAgLmNhcm91c2VsLWluZGljYXRvcnMge1xyXG4gICAgICAgICAgICB0b3A6IGF1dG87XHJcbiAgICAgICAgICAgIGJvdHRvbTogMTVweDtcclxuICAgICAgICB9XHJcbiAgICA8L2ZpbGU+XHJcbjwvZXhhbXBsZT5cclxuKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmRpcmVjdGl2ZSgncGhvdG9GbGlwJyxcclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIC8vdGVtcGxhdGVVUkw6ICdwYXJ0aWFscy9waG90b3MvcGhvdG8udGVzdC5odG1sJ1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2PlxcbjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWwuaW5wdXRcIj5cXG4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdj57e21vZGVsLmlucHV0fX08L2Rpdj5cXG4gICAgXFxuPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KXtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goJ21vZGVsLmlucHV0JywgZnVuY3Rpb24odmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZSA9PT0gJ3Bhc3N3b3JkJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2hhbmdlIHBhc3N3b3JkLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbigxKS50b2dnbGVDbGFzcygnYWxlcnQtYm94IGFsZXJ0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGlmKGRlYnVnKXtcclxuICAgICAgICBjb25zb2xlLmxvZygnZGlyZWN0aXZlKFwicGhvdG9GbGlwXCIpIGRlZmluZWQnKTtcclxuICAgIH0gICAgXHJcblxyXG4vLyAgICAvLyBDYXJvdXNlbCBEaXJlY3RpdmVcclxuLy8gICAgYW5ndWxhclxyXG4vLyAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuLy8gICAgICAgIC5kaXJlY3RpdmUoJ2Nhcm91c2VsJywgXHJcbi8vICAgICAgICBmdW5jdGlvbigpIHtcclxuLy8gICAgICAgICAgICByZXR1cm4ge1xyXG4vLyAgICAgICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcclxuLy8gICAgICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcclxuLy8gICAgICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcclxuLy8gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3Bob3Rvc0NvbnRyb2xsZXInLFxyXG4vLyAgICAgICAgICAgICAgICByZXF1aXJlOiAnY2Fyb3VzZWwnLFxyXG4vLyAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2Nhcm91c2VsL2Nhcm91c2VsLmh0bWwnLFxyXG4vLyAgICAgICAgICAgICAgICBzY29wZToge1xyXG4vLyAgICAgICAgICAgICAgICBpbnRlcnZhbDogJz0nLFxyXG4vLyAgICAgICAgICAgICAgICBub1RyYW5zaXRpb246ICc9JyxcclxuLy8gICAgICAgICAgICAgICAgbm9QYXVzZTogJz0nXHJcbi8vICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICB9O1xyXG4vLyAgICAgICAgfVxyXG4vLyAgICApO1xyXG4vL1xyXG4vLyAgICBpZihkZWJ1Zyl7XHJcbi8vICAgICAgICBjb25zb2xlLmxvZyhcImRpcmVjdGl2ZSgnY2Fyb3VzZWwnKSBkZWZpbmVkXCIpO1xyXG4vLyAgICB9ICAgIFxyXG4vL1xyXG4vLyAgICBhbmd1bGFyXHJcbi8vICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4vLyAgICAgICAgLmRpcmVjdGl2ZSgnc2xpZGUnLCBcclxuLy8gICAgICAgIGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgICAgICAgIHJldHVybiB7XHJcbi8vICAgICAgICAgICAgICAgIHJlcXVpcmU6ICdeY2Fyb3VzZWwnLFxyXG4vLyAgICAgICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcclxuLy8gICAgICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcclxuLy8gICAgICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcclxuLy8gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9jYXJvdXNlbC9zbGlkZS5odG1sJyxcclxuLy8gICAgICAgICAgICAgICAgc2NvcGU6IHtcclxuLy8gICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogJz0/JyxcclxuLy8gICAgICAgICAgICAgICAgICAgIGluZGV4OiAnPT8nXHJcbi8vICAgICAgICAgICAgICAgIH0sXHJcbi8vICAgICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNhcm91c2VsQ3RybCkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgY2Fyb3VzZWxDdHJsLmFkZFNsaWRlKHNjb3BlLCBlbGVtZW50KTtcclxuLy8gICAgICAgICAgICAgICAgICAgIC8vd2hlbiB0aGUgc2NvcGUgaXMgZGVzdHJveWVkIHRoZW4gcmVtb3ZlIHRoZSBzbGlkZSBmcm9tIHRoZSBjdXJyZW50IHNsaWRlcyBhcnJheVxyXG4vLyAgICAgICAgICAgICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGNhcm91c2VsQ3RybC5yZW1vdmVTbGlkZShzY29wZSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICB9KTtcclxuLy9cclxuLy8gICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaCgnYWN0aXZlJywgZnVuY3Rpb24oYWN0aXZlKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJvdXNlbEN0cmwuc2VsZWN0KHNjb3BlKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgIH07XHJcbi8vICAgICAgICB9XHJcbi8vICAgICk7XHJcbi8vXHJcbi8vICAgIGlmKGRlYnVnKXtcclxuLy8gICAgICAgIGNvbnNvbGUubG9nKFwiZGlyZWN0aXZlKCdzbGlkZScpIGRlZmluZWRcIik7XHJcbi8vICAgIH0gICAgXHJcbi8vXHJcbi8vICAgIGFuZ3VsYXJcclxuLy8gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbi8vICAgICAgICAuYW5pbWF0aW9uKCcuaXRlbScsIFxyXG4vLyAgICAgICAgWyckYW5pbWF0ZSddLFxyXG4vLyAgICAgICAgZnVuY3Rpb24gKCRhbmltYXRlKSB7XHJcbi8vICAgICAgICAgICAgcmV0dXJuIHtcclxuLy8gICAgICAgICAgICAgICAgYmVmb3JlQWRkQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcclxuLy8gICAgICAgICAgICAgICAgICAgIC8vIER1ZSB0byB0cmFuc2NsdXNpb24sIG5vVHJhbnNpdGlvbiBwcm9wZXJ0eSBpcyBvbiBwYXJlbnQncyBzY29wZVxyXG4vLyAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PSAnYWN0aXZlJyAmJiBlbGVtZW50LnBhcmVudCgpICYmXHJcbi8vICAgICAgICAgICAgICAgICAgICAhZWxlbWVudC5wYXJlbnQoKS5zY29wZSgpLm5vVHJhbnNpdGlvbikge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdG9wcGVkID0gZmFsc2U7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGVsZW1lbnQuaXNvbGF0ZVNjb3BlKCkuZGlyZWN0aW9uO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb25DbGFzcyA9IGRpcmVjdGlvbiA9PSAnbmV4dCcgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoZGlyZWN0aW9uKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBkaXJlY3Rpb25DbGFzcykudGhlbihmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RvcHBlZCkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhkaXJlY3Rpb25DbGFzcyArICcgJyArIGRpcmVjdGlvbik7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4vL1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BwZWQgPSB0cnVlO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbi8vICAgICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgICAgICBkb25lKCk7XHJcbi8vICAgICAgICAgICAgICAgIH0sXHJcbi8vICAgICAgICAgICAgICAgIGJlZm9yZVJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAvLyBEdWUgdG8gdHJhbnNjbHVzaW9uLCBub1RyYW5zaXRpb24gcHJvcGVydHkgaXMgb24gcGFyZW50J3Mgc2NvcGVcclxuLy8gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT0gJ2FjdGl2ZScgJiYgZWxlbWVudC5wYXJlbnQoKSAmJlxyXG4vLyAgICAgICAgICAgICAgICAgICAgIWVsZW1lbnQucGFyZW50KCkuc2NvcGUoKS5ub1RyYW5zaXRpb24pIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcHBlZCA9IGZhbHNlO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBlbGVtZW50Lmlzb2xhdGVTY29wZSgpLmRpcmVjdGlvbjtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uQ2xhc3MgPSBkaXJlY3Rpb24gPT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBkaXJlY3Rpb25DbGFzcykudGhlbihmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RvcHBlZCkge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhkaXJlY3Rpb25DbGFzcyk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BwZWQgPSB0cnVlO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbi8vICAgICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgICAgICBkb25lKCk7XHJcbi8vICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICB9O1xyXG4vLyAgICAgICAgfVxyXG4vLyAgICApO1xyXG4vLyBcclxuLy8gICAgaWYoZGVidWcpe1xyXG4vLyAgICAgICAgY29uc29sZS5sb2coXCIkYW5pbWF0ZSBmdW5jdGlvbiBkZWZpbmVkXCIpO1xyXG4vLyAgICB9XHJcblxyXG59KCkpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIHVpLmJvb3RzdHJhcC5jYXJvdXNlbC5kaXJlY3RpdmU6Y2Fyb3VzZWxcclxuICogQHJlc3RyaWN0IEVBXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDYXJvdXNlbCBpcyB0aGUgb3V0ZXIgY29udGFpbmVyIGZvciBhIHNldCBvZiBpbWFnZSAnc2xpZGVzJyB0byBzaG93Y2FzZS5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXI9fSBpbnRlcnZhbCBUaGUgdGltZSwgaW4gbWlsbGlzZWNvbmRzLCB0aGF0IGl0IHdpbGwgdGFrZSBcclxuICogICAgIHRoZSBjYXJvdXNlbCB0byBnbyB0byB0aGUgbmV4dCBzbGlkZS5cclxuICogQHBhcmFtIHtib29sZWFuPX0gbm9UcmFuc2l0aW9uIFdoZXRoZXIgdG8gZGlzYWJsZSB0cmFuc2l0aW9ucyBvbiB0aGUgXHJcbiAqICAgICBjYXJvdXNlbC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gbm9QYXVzZSBXaGV0aGVyIHRvIGRpc2FibGUgcGF1c2luZyBvbiB0aGUgY2Fyb3VzZWwgXHJcbiAqICAgIChieSBkZWZhdWx0LCB0aGUgY2Fyb3VzZWwgaW50ZXJ2YWwgcGF1c2VzIG9uIGhvdmVyKS5cclxuICpcclxuICogQGV4YW1wbGVcclxuPGV4YW1wbGUgbW9kdWxlPVwidWkuYm9vdHN0cmFwXCI+XHJcbiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cclxuICAgIDxjYXJvdXNlbD5cclxuICAgICAgPHNsaWRlPlxyXG4gICAgICAgIDxpbWcgc3JjPVwiaHR0cDovL3BsYWNla2l0dGVuLmNvbS8xNTAvMTUwXCIgc3R5bGU9XCJtYXJnaW46YXV0bztcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2Fyb3VzZWwtY2FwdGlvblwiPlxyXG4gICAgICAgICAgPHA+QmVhdXRpZnVsITwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9zbGlkZT5cclxuICAgICAgPHNsaWRlPlxyXG4gICAgICAgIDxpbWcgc3JjPVwiaHR0cDovL3BsYWNla2l0dGVuLmNvbS8xMDAvMTUwXCIgc3R5bGU9XCJtYXJnaW46YXV0bztcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2Fyb3VzZWwtY2FwdGlvblwiPlxyXG4gICAgICAgICAgPHA+RCdhd3chPC9wPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L3NsaWRlPlxyXG4gICAgPC9jYXJvdXNlbD5cclxuICA8L2ZpbGU+XHJcbiAgPGZpbGUgbmFtZT1cImRlbW8uY3NzXCI+XHJcbiAgICAuY2Fyb3VzZWwtaW5kaWNhdG9ycyB7XHJcbiAgICAgIHRvcDogYXV0bztcclxuICAgICAgYm90dG9tOiAxNXB4O1xyXG4gICAgfVxyXG4gIDwvZmlsZT5cclxuPC9leGFtcGxlPlxyXG4qL1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKiBFTkQgT0YgRklMRSAtIHRlc3QuZGlyZWN0aXZlLmpzXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKipcclxuICoqIEZpbGVuYW1lICAgIDogZmlsdGVycy5qc1xyXG4gKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4vKmpzaGludCAtVzEwOSAqLyAvLyBpZ25vcmUgZG91YmxlLXF1b3RlcyBpbiBiZXR3ZWVuIHNpbmdsZS1xdW90ZXNcclxuXHJcbihmdW5jdGlvbiAoZGVidWcpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuZmlsdGVyKCdub051bGxzJywgZnVuY3Rpb24oUGhvdG9zKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkUGhvdG9zID0gW107XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKFBob3Rvcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPFBob3Rvcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggUGhvdG9zW2ldLm5hbWUgIT09ICcnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkUGhvdG9zLnB1c2goUGhvdG9zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnZmlsdGVyZWRQaG90b3MgZnJvbSBub051bGxzJyApO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coIGZpbHRlcmVkUGhvdG9zICk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyZWRQaG90b3M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgaWYoZGVidWcpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmaWx0ZXIoXCJub051bGxzXCIpIGRlZmluZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuZmlsdGVyKCdoaWxpZ2h0cycsIGZ1bmN0aW9uKFBob3Rvcykge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZFBob3RvcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKFBob3Rvcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPFBob3Rvcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggUGhvdG9zW2ldLmhpbGlnaHQgPT0gMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZFBob3Rvcy5wdXNoKFBob3Rvc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggJ2ZpbHRlcmVkUGhvdG9zIGZyb20gaGlsaWdodHMnICk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggZmlsdGVyZWRQaG90b3MgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZFBob3RvcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgaWYoZGVidWcpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmaWx0ZXIoXCJoaWxpZ2h0c1wiKSBkZWZpbmVkJyk7XHJcbiAgICB9XHJcblxyXG59KCkpO1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKiBFTkQgT0YgRklMRSAtIGZpbHRlci5qc1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKlxyXG4gKiogRmlsZW5hbWUgICAgOiBjbGllbnQuc2VydmljZS5qc1xyXG4gKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyk7XHJcblxyXG5cclxuICAgIC8vIGNsaWVudFNlcnZpY2UgRnVuY3Rpb25cclxuICAgIHZhciBjbGllbnRTZXJ2aWNlID0gZnVuY3Rpb24oJGh0dHAsICRxKXtcclxuXHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGNsaWVudHM6IFtdLFxyXG4gICAgICAgICAgICBjbGllbnRDYXRzOiBbXSxcclxuICAgICAgICAgICAgc3J2Y0dldEFsbGNsaWVudHM6IHNydmNHZXRBbGxjbGllbnRzLFxyXG4gICAgICAgICAgICBzcnZjR2V0Y2xpZW50Q2F0czogc3J2Y0dldGNsaWVudENhdHMsXHJcbiAgICAgICAgICAgIHNydmNHZXRTZWxlY3RlZEluZGV4OiBzcnZjR2V0U2VsZWN0ZWRJbmRleCxcclxuICAgICAgICAgICAgc3J2Y0dldEFjbGllbnQ6IHNydmNHZXRBY2xpZW50LFxyXG4gICAgICAgICAgICBzcnZjQWRkY2xpZW50OiBzcnZjQWRkY2xpZW50LFxyXG4gICAgICAgICAgICBzcnZjRWRpdGNsaWVudDogc3J2Y0VkaXRjbGllbnQsXHJcbiAgICAgICAgICAgIHNydmNEZWxjbGllbnQ6IHNydmNEZWxjbGllbnRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBHRVQgYWxsIGNsaWVudHNcclxuICAgICAgICBmdW5jdGlvbiBzcnZjR2V0QWxsY2xpZW50cygpe1xyXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICAvLyBNYWtlIGNhbGwgdG8gUkVTVEZVTCBBUElcclxuICAgICAgICAgICAgJGh0dHAuZ2V0KCdqc29uL2NsaWVudC5qc29uJylcclxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLmNsaWVudHMgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVyciwgc3RhdHVzKXtcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnRmFpbGVkIHRvIGdldCBjbGllbnRzJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNydmNHZXRjbGllbnRDYXRzKCl7XHJcbiAgICAgICAgICAgIHZhciBjbGllbnRzID0gc2VydmljZS5jbGllbnRzO1xyXG4gICAgICAgICAgICB2YXIgY2xpZW50Q2F0cyA9ICBbXTtcclxuICAgICAgICAgICAgaWYoIGNsaWVudHMubGVuZ3RoIDwxKXtcclxuICAgICAgICAgICAgICAgIGNsaWVudHMgPSAgc3J2Y0dldEFsbGNsaWVudHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiggY2xpZW50cy5sZW5ndGggPjApe1xyXG4gICAgICAgICAgICAgICAgY2xpZW50Q2F0cyA9IF8udW5pcShfLnBsdWNrKGNsaWVudHMsICdjYXRlZ29yeScpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXJ2aWNlLmNsaWVudHMgPSBjbGllbnRzO1xyXG4gICAgICAgICAgICBzZXJ2aWNlLmNsaWVudENhdHMgPSBjbGllbnRDYXRzO1xyXG4gICAgICAgICAgICByZXR1cm4gY2xpZW50Q2F0cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGdldCB0aGUgc2VsZWN0ZWQgaW5kZXggaW50byB0aGUgYXJyYXlcclxuICAgICAgICBmdW5jdGlvbiBzcnZjR2V0U2VsZWN0ZWRJbmRleChpZCl7XHJcbiAgICAgICAgICAgIGlmKGlkID49IDApe1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8c2VydmljZS5jbGllbnRzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihzZXJ2aWNlLmNsaWVudHNbaV0uaWQgPT0gaWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBHRVQgYSBjbGllbnRcclxuICAgICAgICAvLyBwYXNzIGluIGEgY2xpZW50IElkIGFuZCBnZXQgdGhlIGNsaWVudCByZWNvcmRcclxuICAgICAgICBmdW5jdGlvbiBzcnZjR2V0QWNsaWVudChpZCl7XHJcbiAgICAgICAgICAgIHZhciBpZHggPSBzcnZjR2V0U2VsZWN0ZWRJbmRleChpZCk7XHJcbiAgICAgICAgICAgIGlmKGlkeCAhPSAtMSl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0QWNsaWVudCgnICsgaWQgKyAnKSgnICsgaWR4ICsgJykgPSBbJyArIHNlcnZpY2UuY2xpZW50c1tpZHhdLm5hbWUgKyAnXScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuY2xpZW50c1tpZHhdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCdjbGllbnQgY291bGQgbm90IGJlIGZvdW5kIScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQUREXHJcbiAgICAgICAgZnVuY3Rpb24gc3J2Y0FkZGNsaWVudChjbGllbnQpe1xyXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICAvLyBNYWtlIGNhbGwgdG8gUkVTVEZVTCBBUElcclxuICAgICAgICAgICAgJGh0dHAucG9zdCgnanNvbi9jbGllbnQuanNvbicsIGNsaWVudClcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuY2xpZW50cyA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyLCBzdGF0dXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnRmFpbGVkIHRvIGFkZCBjbGllbnQnKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVQREFURVxyXG4gICAgICAgIC8vIHBhc3MgaW4gYSBjbGllbnQgcmVjb3JkIGFuZCB1cGRhdGUgdGhlIGZpZWxkcyB3aXRoIHRoZSB2YWx1ZXNcclxuICAgICAgICBmdW5jdGlvbiBzcnZjRWRpdGNsaWVudChjbGllbnQpe1xyXG4gICAgICAgICAgICB2YXIgaWR4ID0gc3J2Y0dldFNlbGVjdGVkSW5kZXgoY2xpZW50LmlkKTtcclxuICAgICAgICAgICAgaWYoaWR4ICE9IC0xKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlZGl0Y2xpZW50KCcgKyBpZCArICcpKCcgKyBpZHggKyAnKSBjaGFuZ2VkOicpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VkaXRjbGllbnQoIC0tLSBuYW1lICAgICBbJyArIHNlcnZpY2UuY2xpZW50c1tpZHhdLm5hbWUgKyAnXSBjaGFuZ2VkIHRvIFsnKyBjbGllbnQubmFtZSArICddJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZWRpdGNsaWVudCggLS0tIGhyZWYgICAgIFsnICsgc2VydmljZS5jbGllbnRzW2lkeF0uaHJlZiArICddIGNoYW5nZWQgdG8gWycrIGNsaWVudC5ocmVmICsgJ10nKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlZGl0Y2xpZW50KCAtLS0gaW1nICAgICAgWycgKyBzZXJ2aWNlLmNsaWVudHNbaWR4XS5pbWcgKyAnXSBjaGFuZ2VkIHRvIFsnKyBjbGllbnQuaW1nICsgJ10nKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlZGl0Y2xpZW50KCAtLS0gY2F0ZWdvcnkgWycgKyBzZXJ2aWNlLmNsaWVudHNbaWR4XS5jYXRlZ29yeSArICddIGNoYW5nZWQgdG8gWycrIGNsaWVudC5jYXRlZ29yeSArICddJyk7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLmNsaWVudHNbaWR4XS5uYW1lID0gY2xpZW50Lm5hbWUgO1xyXG4gICAgICAgICAgICAgICAgc2VydmljZS5jbGllbnRzW2lkeF0uaHJlZiA9IGNsaWVudC5ocmVmIDtcclxuICAgICAgICAgICAgICAgIHNlcnZpY2UuY2xpZW50c1tpZHhdLmltZyA9IGNsaWVudC5pbWcgO1xyXG4gICAgICAgICAgICAgICAgc2VydmljZS5jbGllbnRzW2lkeF0uY2F0ZWdvcnkgPSBjbGllbnQuY2F0ZWdvcnkgO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgY2xpZW50IGluZGV4IFsnICsgaWR4ICsgJ10nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZS5jbGllbnRzW2lkeF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBERUxFVEVcclxuICAgICAgICBmdW5jdGlvbiBzcnZjRGVsY2xpZW50KGlkKXtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IHNydmNHZXRTZWxlY3RlZEluZGV4KGlkKTtcclxuICAgICAgICAgICAgaWYoaWR4ICE9IC0xKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWxjbGllbnQoJyArIGlkICsgJykoJyArIGlkeCArICcpIGRlbGV0ZWQ6Jyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVsY2xpZW50KCAtLS0gbmFtZSAgICAgWycgKyBzZXJ2aWNlLmNsaWVudHNbaWR4XS5uYW1lICAgICArICddIGRlbGV0ZWQnKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWxjbGllbnQoIC0tLSBocmVmICAgICBbJyArIHNlcnZpY2UuY2xpZW50c1tpZHhdLmhyZWYgICAgICsgJ10gZGVsZXRlZCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlbGNsaWVudCggLS0tIGltZyAgICAgIFsnICsgc2VydmljZS5jbGllbnRzW2lkeF0uaW1nICAgICAgKyAnXSBkZWxldGVkJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVsY2xpZW50KCAtLS0gY2F0ZWdvcnkgWycgKyBzZXJ2aWNlLmNsaWVudHNbaWR4XS5jYXRlZ29yeSArICddIGRlbGV0ZWQnKTtcclxuICAgICAgICAgICAgICAgIHNlcnZpY2UuY2xpZW50cy5zcGxpY2UoaWR4LDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgY2xpZW50IGluZGV4IFsnICsgaWR4ICsgJ10nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gY2xpZW50U2VydmljZSBEZWZpbml0b25cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5zZXJ2aWNlKCdjbGllbnRTZXJ2aWNlJywgW1xyXG4gICAgICAgICAgICAnJGh0dHAnLCBcclxuICAgICAgICAgICAgJyRxJyxcclxuICAgICAgICAgICAgY2xpZW50U2VydmljZV0pO1xyXG5cclxufSgpKTtcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiogRU5EIE9GIEZJTEUgLSBjbGllbnQuc2VydmljZS5qc1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKlxyXG4gKiogRmlsZW5hbWUgICAgOiB2b2x1bnRlZXIuc2VydmljZS5qc1xyXG4gKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyk7XHJcblxyXG5cclxuICAgIC8vIHZvbHVudGVlclNlcnZpY2UgRnVuY3Rpb25cclxuICAgIHZhciB2b2x1bnRlZXJTZXJ2aWNlID0gZnVuY3Rpb24oJGh0dHAsICRxKXtcclxuXHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIHZvbHVudGVlcnM6IFtdLFxyXG4gICAgICAgICAgICB2b2x1bnRlZXJDYXRzOiBbXSxcclxuICAgICAgICAgICAgc3J2Y0dldEFsbFZvbHVudGVlcnM6IHNydmNHZXRBbGxWb2x1bnRlZXJzLFxyXG4gICAgICAgICAgICBzcnZjR2V0Vm9sdW50ZWVyQ2F0czogc3J2Y0dldFZvbHVudGVlckNhdHMsXHJcbiAgICAgICAgICAgIHNydmNHZXRTZWxlY3RlZEluZGV4OiBzcnZjR2V0U2VsZWN0ZWRJbmRleCxcclxuICAgICAgICAgICAgc3J2Y0dldEFWb2x1bnRlZXI6IHNydmNHZXRBVm9sdW50ZWVyLFxyXG4gICAgICAgICAgICBzcnZjQWRkVm9sdW50ZWVyOiBzcnZjQWRkVm9sdW50ZWVyLFxyXG4gICAgICAgICAgICBzcnZjRWRpdFZvbHVudGVlcjogc3J2Y0VkaXRWb2x1bnRlZXIsXHJcbiAgICAgICAgICAgIHNydmNEZWxWb2x1bnRlZXI6IHNydmNEZWxWb2x1bnRlZXJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBHRVQgYWxsIHZvbHVudGVlcnNcclxuICAgICAgICBmdW5jdGlvbiBzcnZjR2V0QWxsVm9sdW50ZWVycygpe1xyXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICAvLyBNYWtlIGNhbGwgdG8gUkVTVEZVTCBBUElcclxuICAgICAgICAgICAgJGh0dHAuZ2V0KCdqc29uL3ZvbHVudGVlci5qc29uJylcclxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLnZvbHVudGVlcnMgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVyciwgc3RhdHVzKXtcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnRmFpbGVkIHRvIGdldCB2b2x1bnRlZXJzJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNydmNHZXRWb2x1bnRlZXJDYXRzKCl7XHJcbiAgICAgICAgICAgIHZhciB2b2x1bnRlZXJzID0gc2VydmljZS52b2x1bnRlZXJzO1xyXG4gICAgICAgICAgICB2YXIgdm9sdW50ZWVyQ2F0cyA9ICBbXTtcclxuICAgICAgICAgICAgaWYoIHZvbHVudGVlcnMubGVuZ3RoIDwxKXtcclxuICAgICAgICAgICAgICAgIHZvbHVudGVlcnMgPSAgc3J2Y0dldEFsbHZvbHVudGVlcnMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiggdm9sdW50ZWVycy5sZW5ndGggPjApe1xyXG4gICAgICAgICAgICAgICAgdm9sdW50ZWVyQ2F0cyA9IF8udW5pcShfLnBsdWNrKHZvbHVudGVlcnMsICdjYXRlZ29yeScpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXJ2aWNlLnZvbHVudGVlcnMgPSB2b2x1bnRlZXJzO1xyXG4gICAgICAgICAgICBzZXJ2aWNlLnZvbHVudGVlckNhdHMgPSB2b2x1bnRlZXJDYXRzO1xyXG4gICAgICAgICAgICByZXR1cm4gdm9sdW50ZWVyQ2F0cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGdldCB0aGUgc2VsZWN0ZWQgaW5kZXggaW50byB0aGUgYXJyYXlcclxuICAgICAgICBmdW5jdGlvbiBzcnZjR2V0U2VsZWN0ZWRJbmRleChpZCl7XHJcbiAgICAgICAgICAgIGlmKGlkID49IDApe1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8c2VydmljZS52b2x1bnRlZXJzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihzZXJ2aWNlLnZvbHVudGVlcnNbaV0uaWQgPT0gaWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBHRVQgYSB2b2x1bnRlZXJcclxuICAgICAgICAvLyBwYXNzIGluIGEgdm9sdW50ZWVyIElkIGFuZCBnZXQgdGhlIHZvbHVudGVlciByZWNvcmRcclxuICAgICAgICBmdW5jdGlvbiBzcnZjR2V0QVZvbHVudGVlcihpZCl7XHJcbiAgICAgICAgICAgIHZhciBpZHggPSBzcnZjR2V0U2VsZWN0ZWRJbmRleChpZCk7XHJcbiAgICAgICAgICAgIGlmKGlkeCAhPSAtMSl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0QXZvbHVudGVlcignICsgaWQgKyAnKSgnICsgaWR4ICsgJykgPSBbJyArIHNlcnZpY2Uudm9sdW50ZWVyc1tpZHhdLm5hbWUgKyAnXScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2Uudm9sdW50ZWVyc1tpZHhdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCd2b2x1bnRlZXIgY291bGQgbm90IGJlIGZvdW5kIScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQUREXHJcbiAgICAgICAgZnVuY3Rpb24gc3J2Y0FkZFZvbHVudGVlcih2b2x1bnRlZXIpe1xyXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICAvLyBNYWtlIGNhbGwgdG8gUkVTVEZVTCBBUElcclxuICAgICAgICAgICAgJGh0dHAucG9zdCgnanNvbi92b2x1bnRlZXIuanNvbicsIHZvbHVudGVlcilcclxuICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2Uudm9sdW50ZWVycyA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZXJyLCBzdGF0dXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnRmFpbGVkIHRvIGFkZCB2b2x1bnRlZXInKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVQREFURVxyXG4gICAgICAgIC8vIHBhc3MgaW4gYSB2b2x1bnRlZXIgcmVjb3JkIGFuZCB1cGRhdGUgdGhlIGZpZWxkcyB3aXRoIHRoZSB2YWx1ZXNcclxuICAgICAgICBmdW5jdGlvbiBzcnZjRWRpdFZvbHVudGVlcih2b2x1bnRlZXIpe1xyXG4gICAgICAgICAgICB2YXIgaWR4ID0gc3J2Y0dldFNlbGVjdGVkSW5kZXgodm9sdW50ZWVyLmlkKTtcclxuICAgICAgICAgICAgaWYoaWR4ICE9IC0xKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlZGl0dm9sdW50ZWVyKCcgKyBpZCArICcpKCcgKyBpZHggKyAnKSBjaGFuZ2VkOicpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VkaXR2b2x1bnRlZXIoIC0tLSBuYW1lICAgICBbJyArIHNlcnZpY2Uudm9sdW50ZWVyc1tpZHhdLm5hbWUgKyAnXSBjaGFuZ2VkIHRvIFsnKyB2b2x1bnRlZXIubmFtZSArICddJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZWRpdHZvbHVudGVlciggLS0tIGhyZWYgICAgIFsnICsgc2VydmljZS52b2x1bnRlZXJzW2lkeF0uaHJlZiArICddIGNoYW5nZWQgdG8gWycrIHZvbHVudGVlci5ocmVmICsgJ10nKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlZGl0dm9sdW50ZWVyKCAtLS0gaW1nICAgICAgWycgKyBzZXJ2aWNlLnZvbHVudGVlcnNbaWR4XS5pbWcgKyAnXSBjaGFuZ2VkIHRvIFsnKyB2b2x1bnRlZXIuaW1nICsgJ10nKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlZGl0dm9sdW50ZWVyKCAtLS0gY2F0ZWdvcnkgWycgKyBzZXJ2aWNlLnZvbHVudGVlcnNbaWR4XS5jYXRlZ29yeSArICddIGNoYW5nZWQgdG8gWycrIHZvbHVudGVlci5jYXRlZ29yeSArICddJyk7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLnZvbHVudGVlcnNbaWR4XS5uYW1lID0gdm9sdW50ZWVyLm5hbWUgO1xyXG4gICAgICAgICAgICAgICAgc2VydmljZS52b2x1bnRlZXJzW2lkeF0uaHJlZiA9IHZvbHVudGVlci5ocmVmIDtcclxuICAgICAgICAgICAgICAgIHNlcnZpY2Uudm9sdW50ZWVyc1tpZHhdLmltZyA9IHZvbHVudGVlci5pbWcgO1xyXG4gICAgICAgICAgICAgICAgc2VydmljZS52b2x1bnRlZXJzW2lkeF0uY2F0ZWdvcnkgPSB2b2x1bnRlZXIuY2F0ZWdvcnkgO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgdm9sdW50ZWVyIGluZGV4IFsnICsgaWR4ICsgJ10nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZS52b2x1bnRlZXJzW2lkeF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBERUxFVEVcclxuICAgICAgICBmdW5jdGlvbiBzcnZjRGVsVm9sdW50ZWVyKGlkKXtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IHNydmNHZXRTZWxlY3RlZEluZGV4KGlkKTtcclxuICAgICAgICAgICAgaWYoaWR4ICE9IC0xKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWx2b2x1bnRlZXIoJyArIGlkICsgJykoJyArIGlkeCArICcpIGRlbGV0ZWQ6Jyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVsdm9sdW50ZWVyKCAtLS0gbmFtZSAgICAgWycgKyBzZXJ2aWNlLnZvbHVudGVlcnNbaWR4XS5uYW1lICAgICArICddIGRlbGV0ZWQnKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWx2b2x1bnRlZXIoIC0tLSBocmVmICAgICBbJyArIHNlcnZpY2Uudm9sdW50ZWVyc1tpZHhdLmhyZWYgICAgICsgJ10gZGVsZXRlZCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlbHZvbHVudGVlciggLS0tIGltZyAgICAgIFsnICsgc2VydmljZS52b2x1bnRlZXJzW2lkeF0uaW1nICAgICAgKyAnXSBkZWxldGVkJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVsdm9sdW50ZWVyKCAtLS0gY2F0ZWdvcnkgWycgKyBzZXJ2aWNlLnZvbHVudGVlcnNbaWR4XS5jYXRlZ29yeSArICddIGRlbGV0ZWQnKTtcclxuICAgICAgICAgICAgICAgIHNlcnZpY2Uudm9sdW50ZWVycy5zcGxpY2UoaWR4LDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgdm9sdW50ZWVyIGluZGV4IFsnICsgaWR4ICsgJ10nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gdm9sdW50ZWVyU2VydmljZSBEZWZpbml0b25cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5zZXJ2aWNlKCd2b2x1bnRlZXJTZXJ2aWNlJywgW1xyXG4gICAgICAgICAgICAnJGh0dHAnLCBcclxuICAgICAgICAgICAgJyRxJyxcclxuICAgICAgICAgICAgdm9sdW50ZWVyU2VydmljZV0pO1xyXG5cclxufSgpKTtcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiogRU5EIE9GIEZJTEUgLSB2b2x1bnRlZXIuc2VydmljZS5qc1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKlxyXG4gKiogRmlsZW5hbWUgICAgOiBmYWNpbGl0eS5zZXJ2aWNlLmpzXHJcbiAqKlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcblxyXG4gICAgLy8gZmFjaWxpdHlTZXJ2aWNlIEZ1bmN0aW9uXHJcbiAgICB2YXIgZmFjaWxpdHlTZXJ2aWNlID0gZnVuY3Rpb24oJGh0dHAsICRxKXtcclxuXHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGZhY2lsaXRpZXM6IFtdLFxyXG4gICAgICAgICAgICBmYWNpbGl0eUNhdHM6IFtdLFxyXG4gICAgICAgICAgICBzcnZjR2V0QWxsRmFjaWxpdGllczogc3J2Y0dldEFsbEZhY2lsaXRpZXMsXHJcbiAgICAgICAgICAgIHNydmNHZXRGYWNpbGl0eUNhdHM6IHNydmNHZXRGYWNpbGl0eUNhdHMsXHJcbiAgICAgICAgICAgIHNydmNHZXRTZWxlY3RlZEluZGV4OiBzcnZjR2V0U2VsZWN0ZWRJbmRleCxcclxuICAgICAgICAgICAgc3J2Y0dldEFGYWNpbGl0eTogc3J2Y0dldEFGYWNpbGl0eSxcclxuICAgICAgICAgICAgc3J2Y0FkZEZhY2lsaXR5OiBzcnZjQWRkRmFjaWxpdHksXHJcbiAgICAgICAgICAgIHNydmNFZGl0RmFjaWxpdHk6IHNydmNFZGl0RmFjaWxpdHksXHJcbiAgICAgICAgICAgIHNydmNEZWxGYWNpbGl0eTogc3J2Y0RlbEZhY2lsaXR5XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gR0VUIGFsbCBmYWNpbGl0aWVzXHJcbiAgICAgICAgZnVuY3Rpb24gc3J2Y0dldEFsbEZhY2lsaXRpZXMoKXtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICAgICAgLy8gTWFrZSBjYWxsIHRvIFJFU1RGVUwgQVBJXHJcbiAgICAgICAgICAgICRodHRwLmdldCgnanNvbi9mYWNpbGl0eS5qc29uJylcclxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLmZhY2lsaXRpZXMgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGVyciwgc3RhdHVzKXtcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnRmFpbGVkIHRvIGdldCBmYWNpbGl0aWVzJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNydmNHZXRGYWNpbGl0eUNhdHMoKXtcclxuICAgICAgICAgICAgdmFyIGZhY2lsaXRpZXMgPSBzZXJ2aWNlLmZhY2lsaXRpZXM7XHJcbiAgICAgICAgICAgIHZhciBmYWNpbGl0eUNhdHMgPSAgW107XHJcbiAgICAgICAgICAgIGlmKCBmYWNpbGl0aWVzLmxlbmd0aCA8MSl7XHJcbiAgICAgICAgICAgICAgICBmYWNpbGl0aWVzID0gIHNydmNHZXRBbGxmYWNpbGl0aWVzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoIGZhY2lsaXRpZXMubGVuZ3RoID4wKXtcclxuICAgICAgICAgICAgICAgIGZhY2lsaXR5Q2F0cyA9IF8udW5pcShfLnBsdWNrKGZhY2lsaXRpZXMsICdjYXRlZ29yeScpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXJ2aWNlLmZhY2lsaXRpZXMgPSBmYWNpbGl0aWVzO1xyXG4gICAgICAgICAgICBzZXJ2aWNlLmZhY2lsaXR5Q2F0cyA9IGZhY2lsaXR5Q2F0cztcclxuICAgICAgICAgICAgcmV0dXJuIGZhY2lsaXR5Q2F0cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGdldCB0aGUgc2VsZWN0ZWQgaW5kZXggaW50byB0aGUgYXJyYXlcclxuICAgICAgICBmdW5jdGlvbiBzcnZjR2V0U2VsZWN0ZWRJbmRleChpZCl7XHJcbiAgICAgICAgICAgIGlmKGlkID49IDApe1xyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGk8c2VydmljZS5mYWNpbGl0aWVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihzZXJ2aWNlLmZhY2lsaXRpZXNbaV0uaWQgPT0gaWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBHRVQgYSBmYWNpbGl0eVxyXG4gICAgICAgIC8vIHBhc3MgaW4gYSBmYWNpbGl0eSBJZCBhbmQgZ2V0IHRoZSBmYWNpbGl0eSByZWNvcmRcclxuICAgICAgICBmdW5jdGlvbiBzcnZjR2V0QUZhY2lsaXR5KGlkKXtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IHNydmNHZXRTZWxlY3RlZEluZGV4KGlkKTtcclxuICAgICAgICAgICAgaWYoaWR4ICE9IC0xKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnZXRBRmFjaWxpdHkoJyArIGlkICsgJykoJyArIGlkeCArICcpID0gWycgKyBzZXJ2aWNlLmZhY2lsaXRpZXNbaWR4XS5uYW1lICsgJ10nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLmZhY2lsaXRpZXNbaWR4XTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnRmFjaWxpdHkgY291bGQgbm90IGJlIGZvdW5kIScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQUREXHJcbiAgICAgICAgZnVuY3Rpb24gc3J2Y0FkZEZhY2lsaXR5KGZhY2lsaXR5KXtcclxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgICAgICAgICAgLy8gTWFrZSBjYWxsIHRvIFJFU1RGVUwgQVBJXHJcbiAgICAgICAgICAgICRodHRwLnBvc3QoJ2pzb24vZmFjaWxpdHkuanNvbicsIGZhY2lsaXR5KVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZS5mYWNpbGl0aWVzID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihlcnIsIHN0YXR1cyl7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCdGYWlsZWQgdG8gYWRkIGZhY2lsaXR5Jyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVUERBVEVcclxuICAgICAgICAvLyBwYXNzIGluIGEgZmFjaWxpdHkgcmVjb3JkIGFuZCB1cGRhdGUgdGhlIGZpZWxkcyB3aXRoIHRoZSB2YWx1ZXNcclxuICAgICAgICBmdW5jdGlvbiBzcnZjRWRpdEZhY2lsaXR5KGZhY2lsaXR5KXtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IHNydmNHZXRTZWxlY3RlZEluZGV4KGZhY2lsaXR5LmlkKTtcclxuICAgICAgICAgICAgaWYoaWR4ICE9IC0xKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlZGl0RmFjaWxpdHkoJyArIGlkICsgJykoJyArIGlkeCArICcpIGNoYW5nZWQ6Jyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZWRpdEZhY2lsaXR5KCAtLS0gbmFtZSAgICAgWycgKyBzZXJ2aWNlLmZhY2lsaXRpZXNbaWR4XS5uYW1lICsgJ10gY2hhbmdlZCB0byBbJysgZmFjaWxpdHkubmFtZSArICddJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZWRpdEZhY2lsaXR5KCAtLS0gaHJlZiAgICAgWycgKyBzZXJ2aWNlLmZhY2lsaXRpZXNbaWR4XS5ocmVmICsgJ10gY2hhbmdlZCB0byBbJysgZmFjaWxpdHkuaHJlZiArICddJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZWRpdEZhY2lsaXR5KCAtLS0gaW1nICAgICAgWycgKyBzZXJ2aWNlLmZhY2lsaXRpZXNbaWR4XS5pbWcgKyAnXSBjaGFuZ2VkIHRvIFsnKyBmYWNpbGl0eS5pbWcgKyAnXScpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VkaXRGYWNpbGl0eSggLS0tIGNhdGVnb3J5IFsnICsgc2VydmljZS5mYWNpbGl0aWVzW2lkeF0uY2F0ZWdvcnkgKyAnXSBjaGFuZ2VkIHRvIFsnKyBmYWNpbGl0eS5jYXRlZ29yeSArICddJyk7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLmZhY2lsaXRpZXNbaWR4XS5uYW1lID0gZmFjaWxpdHkubmFtZSA7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLmZhY2lsaXRpZXNbaWR4XS5ocmVmID0gZmFjaWxpdHkuaHJlZiA7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLmZhY2lsaXRpZXNbaWR4XS5pbWcgPSBmYWNpbGl0eS5pbWcgO1xyXG4gICAgICAgICAgICAgICAgc2VydmljZS5mYWNpbGl0aWVzW2lkeF0uY2F0ZWdvcnkgPSBmYWNpbGl0eS5jYXRlZ29yeSA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSW52YWxpZCBmYWNpbGl0eSBpbmRleCBbJyArIGlkeCArICddJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuZmFjaWxpdGllc1tpZHhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gREVMRVRFXHJcbiAgICAgICAgZnVuY3Rpb24gc3J2Y0RlbEZhY2lsaXR5KGlkKXtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IHNydmNHZXRTZWxlY3RlZEluZGV4KGlkKTtcclxuICAgICAgICAgICAgaWYoaWR4ICE9IC0xKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWxGYWNpbGl0eSgnICsgaWQgKyAnKSgnICsgaWR4ICsgJykgZGVsZXRlZDonKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWxGYWNpbGl0eSggLS0tIG5hbWUgICAgIFsnICsgc2VydmljZS5mYWNpbGl0eVtpZHhdLm5hbWUgICAgICsgJ10gZGVsZXRlZCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlbEZhY2lsaXR5KCAtLS0gaHJlZiAgICAgWycgKyBzZXJ2aWNlLmZhY2lsaXR5W2lkeF0uaHJlZiAgICAgKyAnXSBkZWxldGVkJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVsRmFjaWxpdHkoIC0tLSBpbWcgICAgICBbJyArIHNlcnZpY2UuZmFjaWxpdHlbaWR4XS5pbWcgICAgICArICddIGRlbGV0ZWQnKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWxGYWNpbGl0eSggLS0tIGNhdGVnb3J5IFsnICsgc2VydmljZS5mYWNpbGl0eVtpZHhdLmNhdGVnb3J5ICsgJ10gZGVsZXRlZCcpO1xyXG4gICAgICAgICAgICAgICAgc2VydmljZS5mYWNpbGl0eS5zcGxpY2UoaWR4LDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgZmFjaWxpdHkgaW5kZXggWycgKyBpZHggKyAnXScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBmYWNpbGl0eVNlcnZpY2UgRGVmaW5pdG9uXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuc2VydmljZSgnZmFjaWxpdHlTZXJ2aWNlJywgW1xyXG4gICAgICAgICAgICAnJGh0dHAnLCBcclxuICAgICAgICAgICAgJyRxJyxcclxuICAgICAgICAgICAgZmFjaWxpdHlTZXJ2aWNlXSk7XHJcblxyXG59KCkpO1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqKiBFTkQgT0YgRklMRSAtIGZhY2lsaXR5LnNlcnZpY2UuanNcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiJdfQ==
