/*****************************************************************************
 **
 ** @ngdoc overview
 ** @name app.js
 **
 ** @description
 ** main AngularJS application definition file - loads all plugins that will 
 ** be a part of the module.
 **
 ****************************************************************************/
// Global debug flag (passed to other modules)
//////////////////////////////////////////////////////////////////////////////
// Miscellaneous Calendar functions
//////////////////////////////////////////////////////////////////////////////
function getCalendarHTML(mo,yr,showToday){
// mo = zero-based month number
// yr = 4 digit year YYYY
// Create an array containing the month names
var M=new Array("January","February","March","April","May","June","July","August","September","October","November","December"),D=new Array("Sun","Mon","Tue","Wed","Thu","Fri","Sat"),dayOne=new Date(M[mo]+" 1,"+yr),dy=dayOne.getDay();yr=eval(yr);
// Days in each month
var d="312831303130313130313031";
// Is this leap year?
yr/4===Math.floor(yr/4)&&(d=d.substring(0,2)+"29"+d.substring(4,d.length));
// Calculate the position in the d string for this month
var pos=2*mo,ld=eval(d.substring(pos,pos+2)),tday=(new Date).getDate(),dow=(new Date).getDay(),htmlText='<table class="calTable"><tr>';
// Display the month and year
htmlText+='<th class="monHdr"',showToday&&(htmlText+=" hiLite"),htmlText+='" colspan=7 center>'+M[mo]+" "+yr+"</th></tr>",
// Display the days of the week
htmlText+="<tr>";for(var i=0;i<7;i++)htmlText+=i==dow&&showToday?'<td class="wkdayHdr hiLite">':'<td class="wkdayHdr">',htmlText+=D[i]+"</td>";htmlText+="</tr>";var ctr=0;
// Display the day of the month or a blank space
// for the first week of the month
for(
// Display the day of the month or a blank if the 1st falls in mid-week
htmlText+='<tr class="calDayRow">',i=0;i<7;i++)i<dy?htmlText+="<td> </td>":(ctr++,htmlText+=ctr==tday&&showToday?'<td class="hiLite">':"<td>",htmlText+=ctr+"</td>");for(htmlText+="</tr>",
// Display the day of the month for the rest of the month
// Display a blank after the last day of the month
htmlText+='<tr class="calDayRow">';ctr<=ld;){for(i=0;i<7;i++)ctr++,ctr>ld?htmlText+="<td> </td>":(htmlText+=ctr==tday&&showToday?'<td class="hiLite">':"<td>",htmlText+=ctr+"</td>");htmlText+='</tr><tr class="calDayRow">'}return htmlText+='</tr></table><br class="clear" /></div>'}function showCalenders(){var e=new Date,t=e.getMonth(),n=e.getYear()+1900,o=0===t?11:t-1,r=0===t?n-1:n,l=11===t?n+1:n,a=11===t?0:t+1,i=document.getElementById("calLastMon"),s=document.getElementById("calThisMon"),d=document.getElementById("calNextMon");i&&(i.innerHTML=getCalendarHTML(o,r,!1)),s&&(s.innerHTML=getCalendarHTML(t,n,!0)),d&&(d.innerHTML=getCalendarHTML(a,l,!1))}
//////////////////////////////////////////////////////////////////////////////
// Gather Screen Size Information
//////////////////////////////////////////////////////////////////////////////
function gebID(e){return document.getElementById(e)}function gebTN(e){return document.getElementsByTagName(e)}function setStyleToTags(e,t){for(var n=gebTN(e),o=0;o<n.length;o++)n[o].setAttribute("style",t)}function testSizes(e){null===e&&(e="body"),gebID("screen.Width").innerHTML=screen.width.toString(),gebID("screen.Height").innerHTML=screen.height.toString(),gebID("window.Width").innerHTML=window.innerWidth.toString(),gebID("window.Height").innerHTML=window.innerHeight.toString(),gebID("documentElement.Width").innerHTML=document.documentElement.clientWidth.toString(),gebID("documentElement.Height").innerHTML=document.documentElement.clientHeight.toString(),gebID("body.Width").innerHTML=gebTN(e)[0].clientWidth.toString(),gebID("body.Height").innerHTML=gebTN(e)[0].clientHeight.toString()}function displaySizes(e){null===e&&(e="body");var t=document.createElement("table");t.innerHTML="<tr><th>SOURCE</th><th>WIDTH</th><th>x</th><th>HEIGHT</th></tr><tr><td>screen</td><td id='screen.Width' /><td>x</td><td id='screen.Height' /></tr><tr><td>window</td><td id='window.Width' /><td>x</td><td id='window.Height' /></tr><tr><td>document<br>.documentElement</td><td id='documentElement.Width' /><td>x</td><td id='documentElement.Height' /></tr><tr><td>document.body</td><td id='body.Width' /><td>x</td><td id='body.Height' /></tr>",gebTN(e)[0].appendChild(t),setStyleToTags("table","border: 2px solid black !important; position: fixed !important;left: 100px !important; top: 90px !important; padding:5px !important;width: 200px !important; font-size:10px; !importantwhite-space: pre !important; font-family: monospace !important;z-index: 9999 !important;background: white !important;"),setStyleToTags("td","color: black !important; border: none !important; padding: 5px !important; text-align:center !important;"),setStyleToTags("th","color: black !important; border: none !important; padding: 5px !important; text-align:center !important;"),t.style.setProperty("margin-left","-"+t.clientWidth/2+"px"),setInterval(testSizes,200)}function sortByKey(e,t){return e.sort(function(e,n){var o=e[t],r=n[t];return o<r?-1:o>r?1:0})}function multObjArray2Array(e){for(var t=[],n=0;n<e.length;n++)for(var o=0;o<e[n].length;o++)t.push(e[n][o]);return t}function JSONDateToDateObj(e){// jd = JSON Date format ie. '2013-03-08T14:34:00:000Z'
if(24!=e.length||"-"!=e.substr(4,1)||"-"!=e.substr(7,1)||"T"!=e.substr(10,1)||":"!=e.substr(13,1)||":"!=e.substr(16,1)||":"!=e.substr(19,1)||"Z"!=e.substr(23,1))return null;var t=new Date;return t.setFullYear(e.substr(0,4),e.substr(5,2)-1,e.substr(8,2)),t.setHours(e.substr(11,2)),t.setMinutes(e.substr(14,2)),t.setSeconds(e.substr(17,2)),t.setMilliseconds(e.substr(20,3)),t}function editImageData(e){alert("I'm sorry, you don't have the authority to edit image ID#"+e+".")}function deleteImage(e){alert("I'm sorry, you don't have the authority to delete image ID#"+e+".")}function enlargeToggle(e){alert("Enlarge image ID#"+e+".")}function resizePage(){$(document).ready(function(){console.log("resizePage: resize screen on load!");var e=window.height-100;$("#photoCarousel").css("height",e)})}function timedLoop(e,t){setTimeout(function(){console.log("timedLoop("+e+", "+t+")"),//  your code here                
--e&&timedLoop(e,t)},1e3*t)}var debug=!0;!function(){"use strict";
// Define main module.
angular.module("app",["ngAnimate","ngResource","ngTouch","ui","ui.bootstrap","ui.bootstrap.carousel","ui.bootstrap.progressbar","ui.calendar","ui.grid","ui.grid.edit","ui.grid.cellNav","ui.grid.resizeColumns","ui.grid.pinning","ui.grid.selection","ui.grid.moveColumns","ui.grid.exporter","ui.grid.importer","ui.grid.grouping","ui.router","ui.sortable"]);debug&&console.log("angular.module(app) defined")}(),/*****************************************************************************
 ** END OF FILE - app.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : app.config.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";
// Navigation is supplied via the following ui-router section
// 
angular.module("app").config(["$urlRouterProvider","$stateProvider",function(e,t){t.state("home",{controller:"homeController",templateUrl:"partials/home/home.html",url:"/home"}).state("facility",{controller:"facilityController",templateUrl:"partials/facility/facility.html",url:"/facility"}).state("homeless",{controller:"homelessController",templateUrl:"partials/homeless/homeless.html",url:"/homeless"}).state("volunteer",{controller:"volunteerController",templateUrl:"partials/volunteer/volunteer.carousel.html",url:"/volunteer"}).state("register",{controller:"userController",templateUrl:"partials/account/register.html",url:"/register"}).state("login",{controller:"userController",templateUrl:"partials/account/login.html",url:"/login"}).state("logout",{templateUrl:"partials/account/logout.html",url:"/logout"}),e.when("/facility/:facilityName","/partials/facility/:id").when("/volunteer/:volunteerName","/partials/volunteer/:id").when("/homeless/:homelessName","/partials/homeless/:id").otherwise("/home")}]),debug&&console.log('       .config(["$urlRouterProvider", "$stateProvider"]) defined')}(),/*****************************************************************************
 ** END OF FILE - app.config.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : app.run.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";angular.module("app").run(["$rootScope","$state","$stateParams",function(e,t,n){/* It's very handy to add references to $state and $stateParams to the $rootScope
                ** so that you can access them from any scope within your applications.
                ** For example, <li ng-class='{ active: $state.includes('contacts.list') }'> will
                ** set the <li> to active whenever 'contacts.list' or one of its decendents is active.
                */
e.state=t,e.stateParams=n,e.pageLoaded=!0,debug?(e.debug=debug,e.endPoint="http://localhost:3000"):e.endPoint="http://maintz.com"}]),debug&&console.log('       .run(["$rootScope","$state","$stateParams",function ($rootScope,$state,$stateParams) executed')}(),//  pass the number of iterations as an argument
debug&&console.log("misc.js functions defined"),
//}());
/*****************************************************************************
 ** END OF FILE - misc.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : about.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";var e=function(e){debug&&console.log("aboutController activated"),e.items=["about","website"]};angular.module("app").controller("aboutController",["$scope",e]),debug&&console.log("aboutController defined")}(),/*****************************************************************************
 ** END OF FILE - about.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : home.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";angular.module("app").controller("homeController",["$rootScope",function(e){var t=e;
// Temporary values 
// TODO: replace these with real login values;
return debug&&console.log("homeController activated"),t.loggedIn=!0,t.userName="bill@maintz.com",showCalenders(),t}]),debug&&console.log("homeController defined")}(),/*****************************************************************************
 ** END OF FILE - home.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : ui.calendar.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
/*
*  AngularJs Fullcalendar Wrapper for the JQuery FullCalendar
*  API @ http://arshaw.com/fullcalendar/
*
*  Angular Calendar Directive that takes in the [eventSources] nested array object as the ng-model and watches it deeply changes.
*       Can also take in multiple event urls as a source object(s) and feed the events per view.
*       The calendar will watch any eventSource array and update itself when a change is made.
*
*/
function(){"use strict";var e=angular.module("ui.calendar",[]);debug&&console.log("ui.calendar defined"),e.constant("uiCalendarConfig",{calendars:{}}),debug&&console.log("uiCalendarConfig defined"),e.controller("uiCalendarController",["$timeout","$locale",function(e,t){var n=this;debug&&console.log("uiCalendarController activated");var o=n.eventSources,r=n.calendarWatchEvent?n.calendarWatchEvent:angular.noop,l=function(t){var n;return t&&(n=function(){
// This happens outside of angular context so we need to wrap it in a timeout which has an implied apply.
// In this way the function will be safely executed on the next digest.
var n=arguments,o=this;e(function(){t.apply(o,n)})}),n},a=1;
// @return {String} fingerprint of the event object and its properties
this.eventFingerprint=function(e){
// This extracts all the information we need from the event. http://jsperf.com/angular-calendar-events-fingerprint/3
return e._id||(e._id=a++),""+e._id+(e.id||"")+(e.title||"")+(e.url||"")+(+e.start||"")+(+e.end||"")+(e.allDay||"")+(e.className||"")+r(e)||""};var i=1,s=1;
// @return {String} fingerprint of the source object and its events array
this.sourceFingerprint=function(e){var t=""+(e.__id||(e.__id=i++)),n=angular.isObject(e)&&e.events;return n&&(t=t+"-"+(n.__id||(n.__id=s++))),t},
// @return {Array} all events from all sources
this.allEvents=function(){for(var e=[],t=0,n=o.length;t<n;t++){var r=o[t];if(angular.isArray(r))
// event source as array
e.push(r);else if(angular.isObject(r)&&angular.isArray(r.events)){
// event source as object, ie extended form
var l={};for(var a in r)"_id"!==a&&"events"!==a&&(l[a]=r[a]);for(var i=0;i<r.events.length;i++)angular.extend(r.events[i],l);e.push(r.events)}}return Array.prototype.concat.apply([],e)},
// Track changes in array of objects by assigning id tokens to each element and watching the scope for changes in the tokens
// @param {Array|Function} arraySource array of objects to watch
// @param tokenFn {Function} that returns the token for a given object
// @return {Object}
//  subscribe: function(scope, function(newTokens, oldTokens))
//    called when source has changed. return false to prevent individual callbacks from firing
//  onAdded/Removed/Changed:
//    when set to a callback, called each item where a respective change is detected
this.changeWatcher=function(e,t){var n,o=function(){for(var n,o,r=angular.isFunction(e)?e():e,a=[],i=0,s=r.length;i<s;i++)o=r[i],n=t(o),l[n]=o,a.push(n);return a},r=function(e,t){var n,o,r=[],l={};for(n=0,o=t.length;n<o;n++)l[t[n]]=!0;for(n=0,o=e.length;n<o;n++)l[e[n]]||r.push(e[n]);return r},l={},a=function(e,o){var a,i,s,d,u={},c=r(o,e);for(a=0,i=c.length;a<i;a++){var m=c[a];s=l[m],delete l[m];var g=t(s);
// if the element wasn't removed but simply got a new token, its old token will be different from the current one
g===m?n.onRemoved(s):(u[g]=m,n.onChanged(s))}var p=r(e,o);for(a=0,i=p.length;a<i;a++)d=p[a],s=l[d],u[d]||n.onAdded(s)};return n={subscribe:function(e,t){e.$watch(o,function(e,n){var o=!(t&&t(e,n)===!1);o&&a(e,n)},!0)},onAdded:angular.noop,onChanged:angular.noop,onRemoved:angular.noop}},this.getFullCalendarConfig=function(e,t){var n={};return angular.extend(n,t),angular.extend(n,e),angular.forEach(n,function(e,t){"function"==typeof e&&(n[t]=l(n[t]))}),n},this.getLocaleConfig=function(e){if(!e.lang||e.useNgLocale){
// Configure to use locale names by default
var n=function(e){
// convert {0: 'Jan', 1: 'Feb', ...} to ['Jan', 'Feb', ...]
var t,n;t=[];for(n in e)t[n]=e[n];return t},o=t.DATETIME_FORMATS;return{monthNames:n(o.MONTH),monthNamesShort:n(o.SHORTMONTH),dayNames:n(o.DAY),dayNamesShort:n(o.SHORTDAY)}}return{}}}]),debug&&console.log("uiCalendarController defined"),e.directive("uiCalendar",["uiCalendarConfig",function(e){return{restrict:"A",scope:{eventSources:"=ngModel",calendarWatchEvent:"&"},controller:"uiCalendarController",link:function(t,n,o,r){function l(){var n,l=o.uiCalendar?t.$parent.$eval(o.uiCalendar):{};n=r.getFullCalendarConfig(l,e);var a=r.getLocaleConfig(n);angular.extend(a,n),c={eventSources:i},angular.extend(c,a),
//remove calendars from options
c.calendars=null;var s={};for(var d in c)"eventSources"!==d&&(s[d]=c[d]);return JSON.stringify(s)}var a,i=t.eventSources,s=!1,d=r.changeWatcher(i,r.sourceFingerprint),u=r.changeWatcher(r.allEvents,r.eventFingerprint),c=null;t.destroy=function(){a&&a.fullCalendar&&a.fullCalendar("destroy"),a=o.calendar?e.calendars[o.calendar]=$(n).html(""):$(n).html("")},t.init=function(){a.fullCalendar(c),o.calendar&&(e.calendars[o.calendar]=a)},d.onAdded=function(e){a.fullCalendar("addEventSource",e),s=!0},d.onRemoved=function(e){a.fullCalendar("removeEventSource",e),s=!0},d.onChanged=function(e){console.log(e+" changed"),a.fullCalendar("refetchEvents"),s=!0},u.onAdded=function(e){a.fullCalendar("renderEvent",e,!!e.stick)},u.onRemoved=function(e){a.fullCalendar("removeEvents",e._id)},u.onChanged=function(e){e._start=jQuery.fullCalendar.moment(e.start),e._end=jQuery.fullCalendar.moment(e.end),a.fullCalendar("updateEvent",e)},d.subscribe(t),u.subscribe(t,function(){if(s===!0)
// return false to prevent onAdded/Removed/Changed handlers from firing in this case
return s=!1,!1}),t.$watch(l,function(e,n){console.log(e,n),t.destroy(),t.init()})}}}]),debug&&console.log("uiCalendar defined")}(),/*****************************************************************************
 ** END OF FILE - ui.calendar.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : samples.controller.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";
// samplesController Function
var e=function(e,t,n){debug&&console.log("samplesController activated");var o=e;
// console.log(' samples = ', vm.samples);
// console.log('#samples = ', vm.samples.length);
// console.log(' samplesCats = ', vm.samplesCats);
// console.log('\nui-grid.Options = ', vm.gridOptions);
//////////////////////////////////////////////////////////////////////
// sampless collection
//////////////////////////////////////////////////////////////////////
// GET All samples
//////////////////////////////////////////////////////////////////////
// ui-grid options
//////////////////////////////////////////////////////////////////////
return o.init=function(){o.samples=[],o.samplesCats=[],o.sortOrder="id",o.samples=o.getAllV()},o.getAllV=function(){n.srvcGetAllsamples().then(function(e){
// success
o.samples=e,console.log("Number of samples returned = ["+o.samples.length+"]")},function(e){
// error
console.log("ERROR:"+e)},function(e){}).then(function(e){o.samplesCats=_.uniq(_.pluck(o.samples,"category"))}),debug&&0!=o.samples.length&&console.log("samplesController samples("+o.samples.length+")")},o.init(),o.addsamples=function(){var e=t.open({templateUrl:"/partials/samples/addsamples.html",controller:"samplesController"});e.result.then(function(){
// success
o.getAllV()},function(e){
// error
o.getAllV()},function(e){}),o.modifyData=!1},o.editsamples=function(e){o.modifyData=!0,confirm("Do you want to save the changes?")&&n.srvcEditsamples(e).then(function(e){
// success
o.getAllV()},function(e){
// error
console.log("ERROR:"+e)},function(e){}),o.modifyData=!1},o.delsamples=function(e){o.modifyData=!0,confirm("Are you sure you want to DELETE this samples?")&&(null==n.srvcDelsamples(e)?console.log("samples Id ["+e+"] has been deleted!"):console.log("ERROR: samples Id ["+e+"] has NOT been deleted!")),o.modifyData=!1},o.modifyData=!1,o.gridOptions={enableColumnResizing:!0,enableSorting:!0,rowHeight:100,columnDefs:[{field:"img",cellTemplate:"<img width='120px' ng-src='{{grid.getCellValue(row, col)}}' lazy-src>"},{field:"name",displayName:"Name"},{field:"category",displayName:"Category"},{name:"edit",displayName:"Edit",cellTemplate:'<button id="editBtn" type="button" class="btn-small" ng-click="edit(row.entity)" >Edit</button> '}]},o.rowColor=["cyan","cream"],o};
// samplesController Definiton
angular.module("app").controller("samplesController",["$scope","$modal","samplesService",e]),debug&&console.log("samplesController defined")}(),/*****************************************************************************
 ** END OF FILE - samples.controller.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : directives.js
 **
 *****************************************************************************
 ****************************************************************************/
// Define your directives here. 
// Directives can be added to same module as the main 'app' 
// or a seperate module can be created.
/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:slide
 * @restrict EA
 *
 * @description
 * Creates a slide inside a {@link ui.bootstrap.carousel.directive:carousel carousel}.  Must be placed as a child of a carousel element.
 *
 * @param {boolean=} active Model binding, whether or not this slide is currently active.
 * @param {number=} index The index of the slide. The slides will be sorted by this parameter.
 *
 * @example
<example module="ui.bootstrap">
    <file name="index.html">
        <div ng-controller="CarouselDemoCtrl">
            <carousel>
                <slide ng-repeat="slide in slides" active="slide.active" index="$index">
                    <img ng-src="{{slide.image}}" style="margin:auto;">
                    <div class="carousel-caption">
                        <h4>Slide {{$index}}</h4>
                        <p>{{slide.text}}</p>
                    </div>
                </slide>
            </carousel>
            Interval, in milliseconds: <input type="number" ng-model="myInterval">
            <br />Enter a negative number to stop the interval.
        </div>
    </file>
    <file name="script.js">
        function CarouselDemoCtrl() {
            var vm = this;
            vm.myInterval = 5000;
        }
    </file>
    <file name="demo.css">
        .carousel-indicators {
            top: auto;
            bottom: 15px;
        }
    </file>
</example>
*/
function(){"use strict";angular.module("app").directive("photoFlip",function(){return{restrict:"E",replace:!0,
//templateURL: 'partials/photos/photo.test.html'
template:'<div>\n<input type="text" ng-model="model.input">\n<div>{{model.input}}</div>\n    \n</div>',link:function(e,t){e.$watch("model.input",function(e){"password"===e&&(console.log("change password."),t.children(1).toggleClass("alert-box alert"))})}}}),debug&&console.log('directive("photoFlip") defined')}(),/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:carousel
 * @restrict EA
 *
 * @description
 * Carousel is the outer container for a set of image 'slides' to showcase.
 *
 * @param {number=} interval The time, in milliseconds, that it will take 
 *     the carousel to go to the next slide.
 * @param {boolean=} noTransition Whether to disable transitions on the 
 *     carousel.
 * @param {boolean=} noPause Whether to disable pausing on the carousel 
 *    (by default, the carousel interval pauses on hover).
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <carousel>
      <slide>
        <img src="http://placekitten.com/150/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>Beautiful!</p>
        </div>
      </slide>
      <slide>
        <img src="http://placekitten.com/100/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>D'aww!</p>
        </div>
      </slide>
    </carousel>
  </file>
  <file name="demo.css">
    .carousel-indicators {
      top: auto;
      bottom: 15px;
    }
  </file>
</example>
*/
/*****************************************************************************
 ** END OF FILE - test.directive.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : filters.js
 **
 *****************************************************************************
 ****************************************************************************/
/*jshint -W109 */
// ignore double-quotes in between single-quotes
function(e){"use strict";angular.module("app").filter("noNulls",function(e){var t=[];if(e)for(var n=0;n<e.length;n++)""!==e[n].name&&t.push(e[n]);return console.log("filteredPhotos from noNulls"),console.log(t),t}),e&&console.log('filter("noNulls") defined'),angular.module("app").filter("hilights",function(e){var t=[];if(e)for(var n=0;n<e.length;n++)1==e[n].hilight&&t.push(e[n]);return console.log("filteredPhotos from hilights"),console.log(t),t}),e&&console.log('filter("hilights") defined')}(),/*****************************************************************************
 ** END OF FILE - filter.js
 ****************************************************************************/
/*!***************************************************************************
 *****************************************************************************
 **
 ** Filename    : samples.service.js
 **
 *****************************************************************************
 ****************************************************************************/
function(){"use strict";var e=(angular.module("app"),function(e,t){
// GET all samples
function n(){var n=t.defer();
// Make call to RESTFUL API
return e.get("json/samples.json").success(function(e){d.samples=e,n.resolve(e)}).error(function(e,t){n.reject("Failed to get samples")}),n.promise}function o(){var e=d.samples,t=[];return e.length<1&&(e=n()),e.length>0&&(t=_.uniq(_.pluck(e,"category"))),d.samples=e,d.sampleCats=t,t}
// get the selected index into the array
function r(e){if(e>=0)for(var t=0;t<d.samples.length;t++)if(d.samples[t].id==e)return t;return-1}
// GET a sample
// pass in a sample Id and get the sample record
function l(e){var t=r(e);return t!=-1?(console.log("getAsample("+e+")("+t+") = ["+d.samples[t].name+"]"),d.samples[t]):(deferred.reject("sample could not be found!"),null)}
// ADD
function a(n){var o=t.defer();
// Make call to RESTFUL API
return e.post("json/samples.json",n).success(function(e){d.samples=e,o.resolve(e)}).error(function(e,t){o.reject("Failed to add sample")}),o.promise}
// UPDATE
// pass in a sample record and update the fields with the values
function i(e){var t=r(e.id);return t!=-1?(console.log("editsample("+id+")("+t+") changed:"),console.log("editsample( --- name     ["+d.samples[t].name+"] changed to ["+e.name+"]"),console.log("editsample( --- href     ["+d.samples[t].href+"] changed to ["+e.href+"]"),console.log("editsample( --- img      ["+d.samples[t].img+"] changed to ["+e.img+"]"),console.log("editsample( --- category ["+d.samples[t].category+"] changed to ["+e.category+"]"),d.samples[t].name=e.name,d.samples[t].href=e.href,d.samples[t].img=e.img,d.samples[t].category=e.category):console.log("Invalid sample index ["+t+"]"),d.samples[t]}
// DELETE
function s(e){var t=r(e);return t!=-1?(console.log("delsample("+e+")("+t+") deleted:"),console.log("delsample( --- name     ["+d.samples[t].name+"] deleted"),console.log("delsample( --- href     ["+d.samples[t].href+"] deleted"),console.log("delsample( --- img      ["+d.samples[t].img+"] deleted"),console.log("delsample( --- category ["+d.samples[t].category+"] deleted"),d.samples.splice(t,1),null):void console.log("Invalid sample index ["+t+"]")}var d={samples:[],sampleCats:[],srvcGetAllsamples:n,srvcGetsampleCats:o,srvcGetSelectedIndex:r,srvcGetAsample:l,srvcAddsample:a,srvcEditsample:i,srvcDelsample:s};return d});
// samplesService Definiton
angular.module("app").service("samplesService",["$http","$q",e])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
